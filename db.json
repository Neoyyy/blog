{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/imageForPost/类加载器-pic-1.png","path":"images/imageForPost/类加载器-pic-1.png","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_RBah.woff2","path":"fonts/LinBiolinum_RBah.woff2","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_RIah.woff2","path":"fonts/LinBiolinum_RIah.woff2","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_Rah.woff2","path":"fonts/LinBiolinum_Rah.woff2","modified":0,"renderable":0},{"_id":"source/images/imageForPost/一个成熟的博客/jenkins.png","path":"images/imageForPost/一个成熟的博客/jenkins.png","modified":0,"renderable":0},{"_id":"source/images/imageForPost/类加载器-pic-2.jpg","path":"images/imageForPost/类加载器-pic-2.jpg","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_Rah.woff","path":"fonts/LinBiolinum_Rah.woff","modified":0,"renderable":0},{"_id":"source/images/imageForPost/一个成熟的博客/hexo_meitu_2.jpg","path":"images/imageForPost/一个成熟的博客/hexo_meitu_2.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_RBah.woff","path":"fonts/LinBiolinum_RBah.woff","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_RIah.woff","path":"fonts/LinBiolinum_RIah.woff","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_Rah.eot","path":"fonts/LinBiolinum_Rah.eot","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_Rah.ttf","path":"fonts/LinBiolinum_Rah.ttf","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_RBah.ttf","path":"fonts/LinBiolinum_RBah.ttf","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_RBah.eot","path":"fonts/LinBiolinum_RBah.eot","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_RIah.eot","path":"fonts/LinBiolinum_RIah.eot","modified":0,"renderable":0},{"_id":"source/images/imageForPost/笔记/动态代理/静态代理图1.png","path":"images/imageForPost/笔记/动态代理/静态代理图1.png","modified":0,"renderable":0},{"_id":"source/fonts/LinBiolinum_RIah.ttf","path":"fonts/LinBiolinum_RIah.ttf","modified":0,"renderable":0},{"_id":"source/images/imageForPost/笔记/动态代理/cglib代理图1.png","path":"images/imageForPost/笔记/动态代理/cglib代理图1.png","modified":0,"renderable":0},{"_id":"source/images/imageForPost/笔记/动态代理/transient图1.png","path":"images/imageForPost/笔记/动态代理/transient图1.png","modified":0,"renderable":0},{"_id":"source/images/imageForPost/笔记/动态代理/jdk代理图1.png","path":"images/imageForPost/笔记/动态代理/jdk代理图1.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/mouse-click.js","path":"js/src/mouse-click.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1559571460021},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1559571460021},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1559571460021},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1559571460021},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1559571460021},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1559571460021},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1559571460021},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1559571460021},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1559571460021},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1559571460021},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1559571460022},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1559571460022},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1559571460022},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1559571460031},{"_id":"themes/next/_config.yml","hash":"c2af01567c985c9d504a8f51db3dd3b2abbefcab","modified":1559571460022},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1559571460022},{"_id":"source/.DS_Store","hash":"1c362ebb9a9907d1e594ffd864a39c354f5c5cae","modified":1561872406570},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1559571460022},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1559571460022},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1559571460023},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1559571460022},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1559571460023},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1559571460023},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1559571460023},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1559571460023},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1559571460023},{"_id":"themes/next/languages/zh-Hans.yml","hash":"075de8a9e6571e2a0acccbf50714e7102d03c5a5","modified":1559571460023},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1559571460023},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1559571460023},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1559571460023},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1559571460031},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1559571460031},{"_id":"themes/next/layout/_layout.swig","hash":"197d25d5e8b893b62e3bd6ae3431da2fc8f4dc98","modified":1559571460024},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1559571460030},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1559571460030},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1559571460031},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1559571460031},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1559571460031},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1559571460031},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1559571460031},{"_id":"source/about/index.md","hash":"602d9d1ccb20a61e6a7c2a9d74c13b80be20d945","modified":1559571459978},{"_id":"source/_posts/一个成熟的博客.md","hash":"d302ecf9a4c92f2844f5a0b2b410479876590d2f","modified":1559571459978},{"_id":"source/categories/index.md","hash":"5438319815080b369aabeead9738cc45bb58e37d","modified":1559571459978},{"_id":"source/tags/index.md","hash":"388fc5333039a13ad428b10bcb0ab52334642c44","modified":1559571460006},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1559571460062},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1559571460062},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1559571460062},{"_id":"source/images/favicon-16x16.png","hash":"894c0db3d9b5b6ca36fe12ce7a008f3b8cd7d73f","modified":1559571460004},{"_id":"source/_posts/.DS_Store","hash":"a933cad10167100d9a959faa0dea8682d8f55779","modified":1564889721247},{"_id":"source/images/favicon.png","hash":"c5895639bad16f83947cea62592ad26f6dabd93f","modified":1559571460004},{"_id":"source/images/favicon-32x32.png","hash":"5acdd2eefc6574354069eefdb10add9c62649014","modified":1559571460004},{"_id":"source/images/.DS_Store","hash":"d2dc8043813d30fc6584c24cb88f149dac64a5de","modified":1561563491887},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559571460044},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1559571460032},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1559571460032},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1559571460032},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1559571460032},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1559571460032},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1559571460032},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1559571460032},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1559571460032},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1559571460032},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1559571460044},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1559571460044},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1559571460044},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1559571460045},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1559571460045},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1559571460045},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1559571460045},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1559571460045},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559571460046},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1559571460045},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1559571460045},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559571460045},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1559571460046},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1559571460046},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1559571460046},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1559571460024},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1559571460024},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"f17427194175efdcc7e1801d45e4509cd17044bd","modified":1559571460024},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1559571460024},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1559571460024},{"_id":"themes/next/layout/_macro/post.swig","hash":"285f1c3733d1a3ee5b26474d1097da20aff03ad8","modified":1559571460024},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1559571460024},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"d5256e4c92ca981b5ba6db29a7e99490a92671b4","modified":1559571460025},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1559571460025},{"_id":"themes/next/layout/_partials/footer.swig","hash":"abf9fc1ace677c03c8ba0bcfde2fda2474cacb48","modified":1559571460025},{"_id":"themes/next/layout/_partials/comments.swig","hash":"6c5a3e46c34937edadda85bfc71bc10bedab985f","modified":1559571460025},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1559571460025},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1559571460025},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1559571460025},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1559571460025},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1559571460026},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1559571460026},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1559571460026},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1559571460027},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1559571460029},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1559571460029},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1559571460029},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1559571460029},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1559571460029},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1559571460030},{"_id":"source/_posts/java虚拟机/类加载器.md","hash":"0782d36622f4c679b1ab4a80fed8982df3fab4f7","modified":1559571459977},{"_id":"source/_posts/java虚拟机/虚拟机如何执行方法调用.md","hash":"18ab9f1b98b959b585ebeb6ac48bcceb1f917b11","modified":1559571459977},{"_id":"source/_posts/笔记/JAVA 动态代理与Spring AOP  .md","hash":"07d5ab93d156c4f44cdfce2c8f193516955ba903","modified":1564895775951},{"_id":"source/images/imageForPost/.DS_Store","hash":"2f682549ece9511a248bee460c3214acb19a11b5","modified":1561563550011},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559571460044},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559571460044},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559571460040},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559571460040},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559571460041},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559571460027},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559571460027},{"_id":"source/images/imageForPost/类加载器-pic-1.png","hash":"bb6b5865591fc88c4336776870eed096d0f22e66","modified":1559571460005},{"_id":"source/fonts/LinBiolinum_RBah.woff2","hash":"0a34bd40bc949bc1ac254f8cf89a8f7f9db81158","modified":1559571459987},{"_id":"source/fonts/LinBiolinum_RIah.woff2","hash":"a8f91419803cb9a681a5de8a304b15f5c4f85152","modified":1559571459996},{"_id":"source/fonts/LinBiolinum_Rah.woff2","hash":"b7c4117d7d34d159052ebd3cfb3bee8bc3880f7f","modified":1559571460003},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1559571460044},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1559571460044},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1559571460046},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fbb7d9dca9f764dcde96dfa780451b5de796ae0a","modified":1559571460044},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1559571460046},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1559571460044},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1559571460046},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1559571460046},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1559571460046},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1559571460046},{"_id":"themes/next/source/js/src/mouse-click.js","hash":"c41c4922b8d792b2347deda1a40bc0038382c3a5","modified":1559571460047},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1559571460047},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1559571460047},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1559571460047},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1559571460047},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1559571460047},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1559571460040},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"da25279745647a0ec02eb0576725bd70b76ff316","modified":1559571460040},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1559571460040},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1559571460041},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1559571460049},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1559571460050},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1559571460050},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1559571460056},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1559571460052},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1559571460052},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1559571460052},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1559571460053},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1559571460056},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1559571460056},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1559571460056},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1559571460056},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1559571460057},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1559571460057},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1559571460053},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1559571460053},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1559571460053},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1559571460053},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1559571460053},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1559571460058},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1559571460058},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1559571460059},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1559571460060},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1559571460061},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1559571460062},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1559571460061},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1559571460061},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1559571460057},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1559571460057},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1559571460057},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1559571460057},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1559571460057},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1559571460057},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1559571460057},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1559571460057},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1559571460058},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1559571460058},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1559571460058},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1559571460058},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1559571460058},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1559571460058},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1559571460025},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1559571460025},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1559571460026},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1559571460026},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1559571460026},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1559571460026},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1559571460026},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1559571460026},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1559571460026},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1559571460027},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1559571460027},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1559571460027},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1559571460027},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1559571460027},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1559571460027},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1559571460027},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1559571460027},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1559571460028},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1559571460028},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1559571460028},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1559571460028},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1559571460028},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1559571460028},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1559571460028},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1559571460028},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1559571460028},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"a2dc4b43b26e0308427e02fbd7b4108f687d169f","modified":1559571460029},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1559571460029},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"28fe712be29c3b36c55eb021765625a7fa755148","modified":1559571460029},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1559571460029},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1559571460029},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1559571460030},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1559571460030},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1559571460030},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1559571460030},{"_id":"source/images/imageForPost/一个成熟的博客/jenkins.png","hash":"0bb26fc367955b91705ca4542c95343b8cf09b17","modified":1559571460005},{"_id":"source/images/imageForPost/笔记/.DS_Store","hash":"045265818a3148b87433b416b5810b85082907cc","modified":1561563557284},{"_id":"source/images/imageForPost/类加载器-pic-2.jpg","hash":"01b63167ffef2a32ec43b26933665bcb6063a3e0","modified":1559571460006},{"_id":"source/fonts/LinBiolinum_Rah.woff","hash":"f5775c065e0a451bedaa8126e2a2522204647be1","modified":1559571460003},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1559571460056},{"_id":"source/images/imageForPost/一个成熟的博客/hexo_meitu_2.jpg","hash":"057f45f6604de941b58958e2b0ee0e6d16b04da6","modified":1559571460005},{"_id":"source/images/avatar.png","hash":"a0cadff5db3b392e76843d91677072c8f1cd7a91","modified":1559571460004},{"_id":"source/fonts/LinBiolinum_RBah.woff","hash":"af3aaf51e7b72ab26135b3320aa51c0b9eb39e80","modified":1559571459986},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1559571460039},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1559571460039},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1559571460040},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1559571460040},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1559571460040},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1559571460040},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1559571460040},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1559571460035},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1559571460047},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1559571460041},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1559571460041},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1559571460041},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1559571460041},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1559571460043},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1559571460043},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1559571460043},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1559571460043},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1559571460043},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1559571460043},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1559571460048},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1559571460050},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1559571460051},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1559571460051},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1559571460049},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1559571460051},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1559571460051},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1559571460051},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1559571460049},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1559571460052},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1559571460052},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1559571460052},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1559571460053},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1559571460053},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1559571460053},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1559571460054},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1559571460054},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1559571460060},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1559571460060},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1559571460030},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1559571460030},{"_id":"source/images/imageForPost/笔记/动态代理/.DS_Store","hash":"8a7662c0d82ec0ebc9040614b0fdc1b35d6dfb7b","modified":1561563491886},{"_id":"source/fonts/LinBiolinum_RIah.woff","hash":"599e3d7737a675a929a008e4db9afde58b494398","modified":1559571459995},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1559571460056},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1559571460055},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1559571460061},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1559571460033},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1559571460034},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1559571460034},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1559571460034},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1559571460034},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"b7616aa63cb41c8c777a163cc6cb482921e60390","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1559571460037},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1559571460034},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1559571460034},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1559571460034},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1559571460034},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"4303d95d7151680d2ff0a503e7abdbdfccb5774c","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"242917dbd98794c79322206b1e9bd10bb3fc8fa3","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca619ed6939f50581e1d843e17c7045507a6a480","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"11704a911088c03528a5139a858ed2fd4b922a07","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1559571460035},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fd2f8a3185a3b2d543a1244b55f5c0dddf454fd3","modified":1559571460036},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1559571460039},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1559571460039},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1559571460039},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1559571460039},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1559571460039},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1559571460039},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1559571460039},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1559571460038},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1559571460038},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1559571460042},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1559571460043},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1559571460048},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1559571460048},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1559571460048},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1559571460048},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1559571460048},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1559571460051},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1559571460051},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1559571460051},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1559571460051},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1559571460051},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1559571460052},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1559571460055},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1559571460055},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1559571460054},{"_id":"source/fonts/LinBiolinum_Rah.eot","hash":"28505bf2f9698218e76b1bfd3cd69e275887f36e","modified":1559571459999},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1559571460050},{"_id":"source/fonts/LinBiolinum_Rah.ttf","hash":"73119c2f63274fd0825c53ec639511ae2f1601ce","modified":1559571460002},{"_id":"source/fonts/LinBiolinum_RBah.ttf","hash":"50ee376e29207e4e8d9dc2c936efe4997451859d","modified":1559571459986},{"_id":"source/fonts/LinBiolinum_RBah.eot","hash":"c591024cb23a2b26286a032377dafce7e2d15566","modified":1559571459982},{"_id":"source/fonts/LinBiolinum_RIah.eot","hash":"71f1a4a78e81d8c12e77846950d1945015f9b409","modified":1559571459991},{"_id":"source/images/imageForPost/笔记/动态代理/静态代理图1.png","hash":"c769404169e74e37300e297687a122a6bcba30db","modified":1561471001934},{"_id":"source/fonts/LinBiolinum_RIah.ttf","hash":"79289593787b336918d71bd624266c6d1ac26c97","modified":1559571459995},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1559571460060},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1559571460055},{"_id":"source/images/imageForPost/笔记/动态代理/cglib代理图1.png","hash":"be4df3b33ad36199eacb93088ae8015c40ef3265","modified":1561556087688},{"_id":"source/images/imageForPost/笔记/动态代理/transient图1.png","hash":"c49a6de4fe413428eaec04186ec9ec9f18661e93","modified":1561560281345},{"_id":"source/images/imageForPost/笔记/动态代理/jdk代理图1.png","hash":"6e8abdac2b4976988627a69d933f3ecb700ee366","modified":1561554120860},{"_id":"public/atom.xml","hash":"8be08c500a29bcf07aa44ec38bd88c576ce678b6","modified":1561800245712},{"_id":"public/search.xml","hash":"5eb109d9f953f2002c61f6d87347c489bab2698d","modified":1561800245712},{"_id":"public/about/index.html","hash":"923cd340c1925e9ef05626b0302968061b311022","modified":1561800245726},{"_id":"public/categories/index.html","hash":"594ab7585b98fa36291038710da6a9eae395d77b","modified":1561800245726},{"_id":"public/tags/index.html","hash":"c679858f68521dd8134a0ede52c3c230100bc2fc","modified":1561800245726},{"_id":"public/2019/06/26/笔记/JAVA 动态代理与Spring AOP  /index.html","hash":"ed5d74b0945fce446d3220e7d091c86bd9aaebee","modified":1561800245726},{"_id":"public/2019/03/30/一个成熟的博客/index.html","hash":"a8d8b22e1239f9b220f47a8562206018787309e5","modified":1561800245726},{"_id":"public/2019/02/24/java虚拟机/类加载器/index.html","hash":"ecadd64f5a5cd0fddf62dc2c8af6539f01a8b8ef","modified":1561800245726},{"_id":"public/2019/03/30/java虚拟机/虚拟机如何执行方法调用/index.html","hash":"77cd690b84508d7f248f4aeaf83dd9c6be4ecf40","modified":1561800245726},{"_id":"public/archives/index.html","hash":"1a973a2c685e506732d71efdd5a2d2e45f7da840","modified":1561800245726},{"_id":"public/archives/2019/index.html","hash":"4ae84dc6ef984a16f2d245922244a927f85b3762","modified":1561800245726},{"_id":"public/archives/2019/02/index.html","hash":"26ded3fdfdbe500a45aebbc81f5944a342ec287d","modified":1561800245726},{"_id":"public/archives/2019/03/index.html","hash":"498741b41efb6b2da1534b096c42055d91a8d667","modified":1561800245726},{"_id":"public/categories/记录/index.html","hash":"a866a49fcb0f08630902d9d67456b237de6c0446","modified":1561800245726},{"_id":"public/archives/2019/06/index.html","hash":"f4f93fa31db954853edfcacf8ed3e8aea190a2fb","modified":1561800245727},{"_id":"public/categories/买的课怎么也得学完/index.html","hash":"e8d1f174412cfb73ecf616c029a85bd9a5eefc8c","modified":1561800245727},{"_id":"public/index.html","hash":"ad60986097e61f73267b3bdbb44f3a2fb368168e","modified":1561800245727},{"_id":"public/tags/devops/index.html","hash":"9c2e3877665cd70e8cdd81b4bb32c97f6f8a22db","modified":1561800245727},{"_id":"public/tags/java/index.html","hash":"bf3a2f10d644d01c6a86e7790251bd09e5f2a72a","modified":1561800245727},{"_id":"public/images/favicon-16x16.png","hash":"894c0db3d9b5b6ca36fe12ce7a008f3b8cd7d73f","modified":1561800245733},{"_id":"public/images/favicon-32x32.png","hash":"5acdd2eefc6574354069eefdb10add9c62649014","modified":1561800245733},{"_id":"public/images/favicon.png","hash":"c5895639bad16f83947cea62592ad26f6dabd93f","modified":1561800245733},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1561800245733},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1561800245733},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1561800245733},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561800245733},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1561800245733},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1561800245733},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1561800245733},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1561800245733},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561800245733},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1561800245733},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1561800245734},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1561800245734},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1561800245734},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1561800245734},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1561800245734},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1561800245734},{"_id":"public/images/imageForPost/一个成熟的博客/jenkins.png","hash":"0bb26fc367955b91705ca4542c95343b8cf09b17","modified":1561800245734},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1561800245734},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1561800245734},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1561800245734},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1561800245734},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1561800245734},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1561800245734},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1561800245734},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1561800245734},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1561800245734},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1561800245734},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1561800245734},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1561800245734},{"_id":"public/images/imageForPost/类加载器-pic-1.png","hash":"bb6b5865591fc88c4336776870eed096d0f22e66","modified":1561800246083},{"_id":"public/images/imageForPost/一个成熟的博客/hexo_meitu_2.jpg","hash":"057f45f6604de941b58958e2b0ee0e6d16b04da6","modified":1561800246088},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561800246089},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561800246089},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1561800246097},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1561800246097},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1561800246097},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1561800246098},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1561800246098},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1561800246098},{"_id":"public/js/src/mouse-click.js","hash":"c41c4922b8d792b2347deda1a40bc0038382c3a5","modified":1561800246098},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1561800246098},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1561800246098},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1561800246098},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1561800246098},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1561800246098},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1561800246098},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1561800246098},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1561800246098},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1561800246098},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1561800246098},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1561800246098},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1561800246098},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1561800246098},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1561800246098},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1561800246098},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1561800246098},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1561800246098},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1561800246098},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1561800246099},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1561800246099},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1561800246099},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1561800246099},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1561800246099},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1561800246099},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1561800246099},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1561800246099},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1561800246099},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1561800246099},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1561800246099},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1561800246099},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1561800246099},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1561800246099},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1561800246099},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1561800246099},{"_id":"public/css/main.css","hash":"386b460fc2b66bfbe5c59b54cef97abad96b8793","modified":1561800246099},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561800246099},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561800246100},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561800246100},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1561800246105},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1561800246105},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1561800246105},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1561800246105},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1561800246106},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1561800246106},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1561800246106},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1561800246106},{"_id":"public/fonts/LinBiolinum_Rah.woff2","hash":"b7c4117d7d34d159052ebd3cfb3bee8bc3880f7f","modified":1561800246106},{"_id":"public/fonts/LinBiolinum_RBah.woff2","hash":"0a34bd40bc949bc1ac254f8cf89a8f7f9db81158","modified":1561800246106},{"_id":"public/images/imageForPost/类加载器-pic-2.jpg","hash":"01b63167ffef2a32ec43b26933665bcb6063a3e0","modified":1561800246106},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1561800246112},{"_id":"public/fonts/LinBiolinum_RIah.woff2","hash":"a8f91419803cb9a681a5de8a304b15f5c4f85152","modified":1561800246112},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1561800246119},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1561800246120},{"_id":"public/fonts/LinBiolinum_RBah.woff","hash":"af3aaf51e7b72ab26135b3320aa51c0b9eb39e80","modified":1561800246121},{"_id":"public/fonts/LinBiolinum_RIah.woff","hash":"599e3d7737a675a929a008e4db9afde58b494398","modified":1561800246121},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1561800246128},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1561800246128},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1561800246128},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1561800246128},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1561800246128},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1561800246129},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1561800246129},{"_id":"public/images/avatar.png","hash":"a0cadff5db3b392e76843d91677072c8f1cd7a91","modified":1561800246129},{"_id":"public/fonts/LinBiolinum_Rah.woff","hash":"f5775c065e0a451bedaa8126e2a2522204647be1","modified":1561800246129},{"_id":"public/images/imageForPost/笔记/动态代理/静态代理图1.png","hash":"c769404169e74e37300e297687a122a6bcba30db","modified":1561800246129},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1561800246129},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1561800246136},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1561800246136},{"_id":"public/images/imageForPost/笔记/动态代理/cglib代理图1.png","hash":"be4df3b33ad36199eacb93088ae8015c40ef3265","modified":1561800246137},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1561800246141},{"_id":"public/images/imageForPost/笔记/动态代理/transient图1.png","hash":"c49a6de4fe413428eaec04186ec9ec9f18661e93","modified":1561800246141},{"_id":"public/images/imageForPost/笔记/动态代理/jdk代理图1.png","hash":"6e8abdac2b4976988627a69d933f3ecb700ee366","modified":1561800246150},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1561800246155},{"_id":"public/fonts/LinBiolinum_Rah.ttf","hash":"73119c2f63274fd0825c53ec639511ae2f1601ce","modified":1561800246155},{"_id":"public/fonts/LinBiolinum_RBah.eot","hash":"c591024cb23a2b26286a032377dafce7e2d15566","modified":1561800246155},{"_id":"public/fonts/LinBiolinum_RIah.ttf","hash":"79289593787b336918d71bd624266c6d1ac26c97","modified":1561800246156},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1561800246158},{"_id":"public/fonts/LinBiolinum_RBah.ttf","hash":"50ee376e29207e4e8d9dc2c936efe4997451859d","modified":1561800246158},{"_id":"public/fonts/LinBiolinum_Rah.eot","hash":"28505bf2f9698218e76b1bfd3cd69e275887f36e","modified":1561800246160},{"_id":"public/fonts/LinBiolinum_RIah.eot","hash":"71f1a4a78e81d8c12e77846950d1945015f9b409","modified":1561800246160},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1561800246164},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1561800246173},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1561800246178},{"_id":"themes/icarus/.gitignore","hash":"b29f3f37fe52c93596a51f04545b9ae4db2e423c","modified":1564894970032},{"_id":"themes/icarus/README.md","hash":"3ac778601f089605633a6c10e685536209df76a7","modified":1564894970032},{"_id":"themes/icarus/LICENSE","hash":"62e3701684087bc9a66f0b20386036ede9b430b7","modified":1564894970032},{"_id":"themes/icarus/_config.yml","hash":"c2af01567c985c9d504a8f51db3dd3b2abbefcab","modified":1564895473183},{"_id":"themes/icarus/package.json","hash":"7de73489aa98c19dc201dff806adfc14a2af810e","modified":1564894970047},{"_id":"themes/icarus/languages/en.yml","hash":"cb16c889ac2ee5b11dd990b786fb1f4768ffd454","modified":1564894970038},{"_id":"themes/icarus/languages/es.yml","hash":"d7d9e8c43237bcdf3dd0dd9f40ae18a0a2e136d4","modified":1564894970038},{"_id":"themes/icarus/languages/fr.yml","hash":"b85a2d4fcc790a8b84326235850eb54532f6b75e","modified":1564894970039},{"_id":"themes/icarus/languages/id.yml","hash":"ee655e6a045eb28ea480a348bbefd10ef115494b","modified":1564894970039},{"_id":"themes/icarus/languages/ja.yml","hash":"3c921f24b19a797b2ae23cf621a35bb9b043ddf9","modified":1564894970039},{"_id":"themes/icarus/languages/ko.yml","hash":"2eeedc4efd27d344b4210310ee8ca68f8c826a72","modified":1564894970039},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"28ae713d8d26ab875104684e604592f4c495b638","modified":1564894970039},{"_id":"themes/icarus/languages/ru.yml","hash":"62451109780acfe2db8630248005697c10a68a61","modified":1564894970039},{"_id":"themes/icarus/languages/vn.yml","hash":"cd2d57a3fe6389bdd76f193c6c662d242960ed02","modified":1564894970039},{"_id":"themes/icarus/languages/tr.yml","hash":"2e334f0f98756256754f48d8dff3baa045700283","modified":1564894970039},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"1ca3f7b92872443c79b5f8026272b3bd21b4dd46","modified":1564894970039},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"57126abcfd47318e7c04c24034ab27d36a5663ac","modified":1564894970039},{"_id":"themes/icarus/layout/archive.ejs","hash":"6b70b5a3848456515ac8afb2226e7d299a6f2746","modified":1564894970040},{"_id":"themes/icarus/layout/categories.ejs","hash":"5df2ae61ec3869d265113d695e2e25aaa60e8e67","modified":1564894970040},{"_id":"themes/icarus/layout/category.ejs","hash":"d3c97be4f70c7d5a6b8512d94d54110e044b8461","modified":1564894970040},{"_id":"themes/icarus/layout/index.ejs","hash":"4e088cfb6fa4b50a1cb422a00623aba1975529e1","modified":1564894970042},{"_id":"themes/icarus/layout/layout.ejs","hash":"421b317b7661fbe05a447f5d62632b38e24bd71f","modified":1564894970043},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1564894970043},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1564894970044},{"_id":"themes/icarus/layout/tag.ejs","hash":"148453030e534c70cdc68ed5b2a1c7037d662ace","modified":1564894970045},{"_id":"themes/icarus/layout/tags.ejs","hash":"9b185ad009855aa645e6fb5ccb28c022571852d0","modified":1564894970045},{"_id":"themes/icarus/scripts/index.js","hash":"72d18d8532310f5b1af2902b1ce4be24d77a969d","modified":1564894970047},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"b921f7ab80c3de92291ce2c9081baa4464133787","modified":1564894970032},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"e3457d76a2319ab699804dd7ace25bf2b57c2a34","modified":1564894970033},{"_id":"themes/icarus/includes/common/utils.js","hash":"4099226113e3d631b58452f529d58cf00758fd24","modified":1564894970033},{"_id":"themes/icarus/includes/generators/categories.js","hash":"6aef75f08a11a06e5c72d9b0b768c3aa7462080c","modified":1564894970034},{"_id":"themes/icarus/includes/generators/category.js","hash":"1f40399fc0d56f89490d669c6399cd40b9465e93","modified":1564894970035},{"_id":"themes/icarus/includes/generators/insight.js","hash":"8fcac981ab9537fc110ff8a6d00f67bd6f41aeec","modified":1564894970035},{"_id":"themes/icarus/includes/generators/tags.js","hash":"ee929b68019b4759099d292257971d3267c5abd7","modified":1564894970035},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"cd59347afe79306134963fb260318d296e59a32d","modified":1564894970034},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"10ed3f19f2bc317e4c706f74bc8cc27c87c533e4","modified":1564894970035},{"_id":"themes/icarus/includes/helpers/config.js","hash":"09103f85a5565268f344a58c1dfe51fca88226c1","modified":1564894970035},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"f11bec84cfc734228dada6c2061a139788b7ffb1","modified":1564894970035},{"_id":"themes/icarus/includes/helpers/override.js","hash":"0a5a0835963ee731a3ac783328de9562c2df34be","modified":1564894970035},{"_id":"themes/icarus/includes/helpers/page.js","hash":"d05eff6d9be128974881a9097354ca926d15538d","modified":1564894970036},{"_id":"themes/icarus/includes/helpers/site.js","hash":"9728a8bee85dce0fbc6579b3f657b5a8e8ee7957","modified":1564894970036},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"aae28b3559b7654f0a567d50d2f52da4b267474a","modified":1564894970036},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"94a9522e3aa5987f0703d21e9a88f61bf5f47062","modified":1564894970036},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"e2a6c34d7ac9a5af828670da4ff1ce92ed298e49","modified":1564894970036},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"bc47f29f158b5c61de45c3b7ab7b8932e145bed6","modified":1564894970036},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"6b65be067c332fba3c901e863a5802089a2149a3","modified":1564894970036},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"6343e66c3dfe78ae95222ef80d843197f33fe206","modified":1564894970036},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"a4fb66751a34f4f58f74f4c72298583273235453","modified":1564894970037},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"c6f8bad99e35aa2f725d4ad6fb66c439395c9fe1","modified":1564894970037},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"83f6f2033809bcdc53842aa78f3f54b1dcc43d93","modified":1564894970037},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"6daf37f77e8af8b3acfd81c92e6338fa564af6d0","modified":1564894970037},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"62f87ee8977a3750efa10a433e92cc28a6d303e7","modified":1564894970037},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"ffe1cdcba20fbc4699544d8b317f308f196a15ed","modified":1564894970037},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"8df01b8edc247d4f6f18957cd07eb0c07dcbd5f2","modified":1564894970038},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"bde42bc23ef29f65cda316b576374634638a4fcc","modified":1564894970038},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"a69b003cd482c2fe4495705c5e075d73e7e54ceb","modified":1564894970038},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"79029c355e1c2dba598e901efe7c5f1ada488cdb","modified":1564894970038},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"73d0ff7bc3e40d7178fb5627fec2a41c15c585e6","modified":1564894970038},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"e0a2716e7a6c7da26182135fce4776596761a699","modified":1564894970040},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"dff3a7b30440cf7d0e318bfa69d7b9036881ae09","modified":1564894970040},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"e85147af863387b27ea2417581f7268708a4d863","modified":1564894970040},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"1dc5f0ab1cd365c8c0338486a4ac2c26f7ccee68","modified":1564894970040},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1564894970041},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"55bfe636859f118b40750bd36e2c3ef1a2ec4c0e","modified":1564894970041},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"792a1e44b71ed8048903ea898aeaf74a6c109037","modified":1564894970041},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1564894970041},{"_id":"themes/icarus/layout/common/article.ejs","hash":"b04d496d595166dc3fb26eb5996b445f44076e26","modified":1564894970041},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"b4fb05aa3684569bc7ea88d5f4f8765140596a2e","modified":1564894970041},{"_id":"themes/icarus/layout/common/head.ejs","hash":"87d740e9dee37fe0ad1661e7630f17d3b3be3106","modified":1564894970041},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"556f2eee649caf431f32e64daf77c297e0937896","modified":1564894970042},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"92efd4c3f4a47d8423fe7e09ecdddb2e335553cc","modified":1564894970042},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"bc7bf6519be04fbb808c3d9d1c42a796cd3780e8","modified":1564894970042},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"928bc53129289f6a7500891b351321e35470fd62","modified":1564894970042},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"c3b24c01f6d9ae8aac4dab9af658ba7b6566419f","modified":1564894970042},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"1720c77b63058faabfe76385c1f21442475534f9","modified":1564894970042},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"60d8b1432e123c2bc03d7cb77288661086dcdc3c","modified":1564894970042},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"456b0dcdd005ff04210c1cebbddd2b9fa2a94dca","modified":1564894970042},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"0454c332b5ecf2c811ed2bc4d7dbebb1b5fcf9cf","modified":1564894970043},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"15da86153379c409b475fd70336fcecafe502539","modified":1564894970043},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"97bd00bea4ac13580b107316c041fc850857da19","modified":1564894970043},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"2b10558454554ed47f1cb23d0ce1422d353684b4","modified":1564894970043},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"5848e9a2d91e3bcd2093da7330adb1f5d6eaf8c6","modified":1564894970043},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"e8c4255a76e423ca41289b344b44df1e2283b34f","modified":1564894970043},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"dfab055884e07b2d54dab675fecb22826b6e4759","modified":1564894970043},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"5d07ebfabf5c43d32ad6df0ae135634d217f8c55","modified":1564894970044},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"10bf4c017afb40810cfa3dfa6616f7acc98ae2da","modified":1564894970044},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"6f3a7b78e0dd1db5bc901e9b20e0c7c719ace2e8","modified":1564894970044},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"ab71a935a9d760eca55ea90842378aa58f1bcdad","modified":1564894970044},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"c5a79c1450abf38317e697ef7a819858ff6ae898","modified":1564894970044},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"1a00151869919b230f1c0a0bec10475e24b81c97","modified":1564894970044},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"b22352d27cd0636898207a840a20b6c85267b23b","modified":1564894970045},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"9cc26da261527bbba8b0180e0f73e0c6ae5416b5","modified":1564894970045},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"f239702ad6eb2876bf821ae197ea5ba27e642dd4","modified":1564894970045},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"b59c0708480ead768d15ef53ce028b5f1a715960","modified":1564894970045},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"90e24e50c1dc18c22fbb9fa24320bf669e8a6283","modified":1564894970045},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"307d905cd39ac4908ef5589829a18777f314428d","modified":1564894970045},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"7ad292f0a27d84f2fffb7fb5f4f28e156de835e4","modified":1564894970046},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1564894970046},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"cd9df7649f2709caeaa72d6e5b064b52a9bf4a0d","modified":1564894970046},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"8db6c391b92c210565fe97cba36e942bac6b19c5","modified":1564894970046},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"6a0bccb67b2125b725bbaf9e956ff77d4fed87f1","modified":1564894970046},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1564894970046},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"8ddf392a9669bac59723b571790d2628ac76f676","modified":1564894970046},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"a47f11270c21cd62399089e3bb42eef84c69347f","modified":1564894970047},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"ab0304e684db5e2f45520a511df5aa36a04d2f2a","modified":1564894970047},{"_id":"themes/icarus/source/css/insight.css","hash":"10aedd26a4930166b826d72b25cdbd509609b84b","modified":1564894970048},{"_id":"themes/icarus/source/css/progressbar.css","hash":"a3ef2b1ee0ee0889a82c3c693e53139fd4c0d143","modified":1564894970048},{"_id":"themes/icarus/source/css/search.css","hash":"b2fb780ce22684998a47b282a57f603511b040b2","modified":1564894970048},{"_id":"themes/icarus/source/css/style.styl","hash":"17cd62709b4aa9e419342989d9870877af6f4b43","modified":1564894970048},{"_id":"themes/icarus/source/images/avatar.png","hash":"6f6ac9e62fce48c3bda8c83ee9cbdf1451be46a7","modified":1564894970048},{"_id":"themes/icarus/source/images/favicon.svg","hash":"561b81aa1c10527c3d70079e0ed6968109da4ccd","modified":1564894970049},{"_id":"themes/icarus/source/images/logo.svg","hash":"932fd2bf3b2b9071db94a64295a414195b21dfe5","modified":1564894970049},{"_id":"themes/icarus/source/images/og_image.png","hash":"2ff0f016fc4863360c5890c9a4f678cca3160aef","modified":1564894970049},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"38801ce6b2f60c660e1b8868da902c9ab553c82f","modified":1564894970049},{"_id":"themes/icarus/source/js/animation.js","hash":"eabfccd284ca67920dd7977aa664d8b32b1911f7","modified":1564894970049},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"0c59b27d77fbf53fe9197d0856f87114b2bb33aa","modified":1564894970049},{"_id":"themes/icarus/source/js/clipboard.js","hash":"0daff5e59cca68be98325ac92f9f2549e7a6b251","modified":1564894970049},{"_id":"themes/icarus/source/js/gallery.js","hash":"fa0f9385dbdc09c75b06c412743d37424449c5ae","modified":1564894970050},{"_id":"themes/icarus/source/js/insight.js","hash":"c8669315f46c197efe9e9cd448d5b983049f348d","modified":1564894970050},{"_id":"themes/icarus/source/js/main.js","hash":"38b89c796da932bf711b4afe3aa6c4e846f8bd51","modified":1564894970050},{"_id":"themes/icarus/includes/filters/emoji/index.js","hash":"83fad3af53b2ce137c7ebd872520a39cb0991682","modified":1564894970034},{"_id":"themes/icarus/includes/filters/emoji/update-emojis.js","hash":"210501fbe8c27b01bf0f59d9a0281f8ea0750d08","modified":1564894970034},{"_id":"themes/icarus/includes/filters/emoji/emojis.json","hash":"a65c5af95dbcb3013b85487225f9c014d6f0a94d","modified":1564895347791},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1564658232000},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1564658232000},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1564658232000},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1564658232000},{"_id":"themes/pure/_config.yml","hash":"a05b5b15672b604b36c2b68ad62aa065f16ccff2","modified":1569499492609},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1564658232000},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1564658232000},{"_id":"source/_posts/如何计算算法的复杂度.md","hash":"5613ee0b7325d1965445ed774ac2c535a13f612c","modified":1567954498276},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1564658232000},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1564658232000},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1564658232000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1564658232000},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1564658232000},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1564658232000},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1564658232000},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1564658232000},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1564658232000},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1564658232000},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1564658232000},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1564658232000},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1564658232000},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1564658232000},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1564658232000},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1564658232000},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1564658232000},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1564658232000},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1564658232000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1564658232000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1564658232000},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1564658232000},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1564658232000},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1564658232000},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1564658232000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1564658232000},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1564658232000},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1564658232000},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1564658232000},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1564658232000},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1564658232000},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1564658232000},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1564658232000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1564658232000},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1564658232000},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1564658232000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1564658232000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1564658232000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1564658232000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1564658232000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1564658232000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1564658232000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1564658232000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1564658232000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1564658232000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1564658232000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1564658232000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1564658232000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1564658232000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1564658232000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1564658232000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1564658232000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1564658232000},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1564658232000},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1564658232000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1564658232000},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1564658232000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1564658232000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1564658232000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1564658232000},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1564658232000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1564658232000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1564658232000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1564658232000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1564658232000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1564658232000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1564658232000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1564658232000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1564658232000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1564658232000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1564658232000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1564658232000},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1564658232000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1564658232000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1564658232000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1564658232000},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1564658232000},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1564658232000},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1564658232000},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1564658232000},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1564658232000},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1564658232000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1564658232000},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1564658232000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1564658232000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1564658232000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1564658232000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1564658232000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1564658232000},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1564658232000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1564658232000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1564658232000},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1564658232000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1564658232000},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1564658232000},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1564658232000},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1564658232000},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1564658232000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1564658232000},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1564658232000},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1564658232000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1564658232000},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1564658232000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1564658232000},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1564658232000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1564658232000},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1564658232000},{"_id":"themes/pure/source/images/avatar.png","hash":"a0cadff5db3b392e76843d91677072c8f1cd7a91","modified":1569499390317}],"Category":[{"name":"记录","_id":"cjxhbjhib000363fyaeraodzr"},{"name":"买的课怎么也得学完","_id":"cjxhbjhk5000a63fylseunrlk"}],"Data":[],"Page":[{"title":"about","date":"2019-02-21T07:19:44.000Z","type":"about","_content":"### java  \n### 资金交易类开发  \n### 会点vue  \n### 有输出才是有效的学习","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-02-21 15:19:44\ntype: \"about\"\n---\n### java  \n### 资金交易类开发  \n### 会点vue  \n### 有输出才是有效的学习","updated":"2019-06-03T14:17:39.978Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjxhbjhi5000063fy4epgni9y","content":"<h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><h3 id=\"资金交易类开发\"><a href=\"#资金交易类开发\" class=\"headerlink\" title=\"资金交易类开发\"></a>资金交易类开发</h3><h3 id=\"会点vue\"><a href=\"#会点vue\" class=\"headerlink\" title=\"会点vue\"></a>会点vue</h3><h3 id=\"有输出才是有效的学习\"><a href=\"#有输出才是有效的学习\" class=\"headerlink\" title=\"有输出才是有效的学习\"></a>有输出才是有效的学习</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><h3 id=\"资金交易类开发\"><a href=\"#资金交易类开发\" class=\"headerlink\" title=\"资金交易类开发\"></a>资金交易类开发</h3><h3 id=\"会点vue\"><a href=\"#会点vue\" class=\"headerlink\" title=\"会点vue\"></a>会点vue</h3><h3 id=\"有输出才是有效的学习\"><a href=\"#有输出才是有效的学习\" class=\"headerlink\" title=\"有输出才是有效的学习\"></a>有输出才是有效的学习</h3>"},{"title":"分类","date":"2019-02-21T06:46:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-02-21 14:46:26\ntype: \"categories\"\n---\n","updated":"2019-06-03T14:17:39.978Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjxhbjhia000263fy933gcnq1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-02-21T06:46:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-02-21 14:46:26\ntype: \"tags\"\n---\n","updated":"2019-06-03T14:17:40.006Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjxhbjhid000563fysaqhxspp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"一个成熟的博客","date":"2019-03-30T05:39:04.000Z","comments":0,"_content":"\n### 一个成熟的博客应该学会自己部署啦\n\n\n\n![hexo_meitu_2](/images/imageForPost/一个成熟的博客/hexo_meitu_2.jpg)  \n<!-- more -->\n\n### 我要干啥  \n\n通过jenkins自动部署hexo博客，只需要将写好的博客推送到github仓库即可，作为一个记录，所以这不是一篇步骤性的教学文章！只是分享下方法，详细的教学文章很多，只需要打开搜索引擎，输入  \n\n```shell\njenkins \nhexo\ngithub\n```\n\n即可\n\n### 建博客的缘由\n\n虽然到现在还没有写博客，但是博客平台还是要建起来的，万一哪天就有可以写博客的内容了呢。虽然如掘金，简书等各大平台都可以发布博客，已经买了阿里云两年，那自然是要利用起来的，又不想浪费大量时间去从头开始写一个博客工程，那就考虑下现有的可以用来创建博客的工具--hexo吧，作为一个node应用，可以很方便的搭建起来，还能随意换主题，还可以使用github仓库的issues作为评论，只需要node.js环境和npm包管理器，通过nginx作为静态文件服务器就可以进行访问。\n\n### 如何让hexo自动构建  \n\n试过两种方法，打算使用github仓库的issues作为评论所以目前使用的是第二种方法  \n\n- 服务器搭建git，通过git hooks钩子在推送到git仓库后执行hexo g编译并复制到/var/www/blog文件夹下  \n- 通过jenkins关联github仓库，发现有推送就进行拉取并执行编译命令，编译完成后复制到web目录下，构建完成后发送邮件进行通知\n\n### 为什么要让博客自动构建  \n\n因为我懒啊，最原始方式部署博客的话，通过nginx引出hexo编译后的静态文件进行访问， 所以更新完博客的话需要推送github，然后本地执行hexo g编译再将编译后的文件通过ftp上传。\n\n第一种方式需要在服务器上创建git用户，并搭建git环境，创建git仓库。\n\n配置该用户的ssh key进行访问，使得hexo工程中配置好git仓库地址后，可以通过hexo的hexo d命令可以直接编译并推送到服务器上的git仓库。\n\n当有数据推送到服务器的git仓库后，通过git hooks执行复制脚本编译，并把文件复制到/var/ww/blog文件夹下进行访问。\n\n目前博客托管在github上，所以不想维护两个仓库，于是打算采用方式二\n\n### 让jenkins来构建博客  \n\n#### 主要构建过程  \n\nlocal: git push -> github \ngithub: 偶哟，有新的推送，该通知服务器上的jenkins干活了  \njenkins：是博客的仓库诶！拉取过来，执行预先写好的脚本进行编译、部署。搞定~邮件通知下\n\n收到了构建成功邮件，访问博客站点，看到了新博客\n\n------\n\n对于jenkins来说需要配置一个自动构建工程\n\n#### 自动构建工程配置  \n\n创建一个自动构建工程，指定github仓库地址，配上仓库的密钥key，使得jenkins在该仓库有更新时可以拉取数据，写好构建时要执行的shell脚本，当仓库更新并拉取数据后执行该脚本，构建后可以配置邮件通知，详细步骤可以参考网络上大量的教程文章。  \n\n#### 需要的环境准备   \n\n##### jenkins  \n\njenkins运行需要java环境，[jenkins官网](https://jenkins.io/) 下载到war包\n\n```shell\nnohup java -jar jenkins.war --httpPort={对外端口} & \n```\n\n 即可后台启动jenkins  \n\n![](/images/imageForPost/一个成熟的博客/jenkins.png)\n\n用于自动构建的脚本  \n\n```shell\nhexo clean\nnpm install\nhexo g\ncp -r ./public/. /var/www/blog\n```\n\njenkins拉取github仓库的推送后执行目录在/root/.jenkins/workspace/{jenkins工程目录}  \n\n所以脚本也是在jenkins工程目录为起点执行的\n\n##### node.js\n\nnode是一个JavaScript 运行环境，hexo是node.js上的一个静态博客框架，可以使用npm包管理器安装  \n\n```shell\nnpm install -g hexo-cli\n```\n\nhexo为npm安装的应用，目录在  {node应用目录}/lib/node_modules/hexo-cli/bin/目录下，需要将hexo通过ln命令创建一个全局可用的链接： ln -s {hexo真实目录} /usr/local/bin/hexo   \n\nnpm、node等命令出现找不到并确认已经安装即可使用相同方式处理      \n\n##### nginx  \n\nhexo编译结果为静态文件，只需访问index.html文件即可，所以附上nginx配置  \n\n```\nserver {\n    listen       80;\n    server_name  localhost;\n    location / {\n        root   /var/www/blog;\n        index  index.html index.htm;\n    }\n\n}\n\n```\n\n博客文件目录为/var/www/blog/，内容为hexo工程执行hexo g编译后public文件夹下的所有内容\n\nnginx启动默认是nginx用户\n\nnginx的启动配置文件中可以指定执行用户，如果该用户对博客静态文件文件夹没有读权限则访问时会报403 forbidden错误。\n\n------\n\n当环境准备好后hexo就已经是个成熟的博客啦，他可以自己完成部署，不需要我再手动搬运了~\n\n\n\n","source":"_posts/一个成熟的博客.md","raw":"---\ntitle: 一个成熟的博客\ndate: 2019-03-30 13:39:04\ncomments: false\ncategories: \n- 记录\ntags: \n- devops\n---\n\n### 一个成熟的博客应该学会自己部署啦\n\n\n\n![hexo_meitu_2](/images/imageForPost/一个成熟的博客/hexo_meitu_2.jpg)  \n<!-- more -->\n\n### 我要干啥  \n\n通过jenkins自动部署hexo博客，只需要将写好的博客推送到github仓库即可，作为一个记录，所以这不是一篇步骤性的教学文章！只是分享下方法，详细的教学文章很多，只需要打开搜索引擎，输入  \n\n```shell\njenkins \nhexo\ngithub\n```\n\n即可\n\n### 建博客的缘由\n\n虽然到现在还没有写博客，但是博客平台还是要建起来的，万一哪天就有可以写博客的内容了呢。虽然如掘金，简书等各大平台都可以发布博客，已经买了阿里云两年，那自然是要利用起来的，又不想浪费大量时间去从头开始写一个博客工程，那就考虑下现有的可以用来创建博客的工具--hexo吧，作为一个node应用，可以很方便的搭建起来，还能随意换主题，还可以使用github仓库的issues作为评论，只需要node.js环境和npm包管理器，通过nginx作为静态文件服务器就可以进行访问。\n\n### 如何让hexo自动构建  \n\n试过两种方法，打算使用github仓库的issues作为评论所以目前使用的是第二种方法  \n\n- 服务器搭建git，通过git hooks钩子在推送到git仓库后执行hexo g编译并复制到/var/www/blog文件夹下  \n- 通过jenkins关联github仓库，发现有推送就进行拉取并执行编译命令，编译完成后复制到web目录下，构建完成后发送邮件进行通知\n\n### 为什么要让博客自动构建  \n\n因为我懒啊，最原始方式部署博客的话，通过nginx引出hexo编译后的静态文件进行访问， 所以更新完博客的话需要推送github，然后本地执行hexo g编译再将编译后的文件通过ftp上传。\n\n第一种方式需要在服务器上创建git用户，并搭建git环境，创建git仓库。\n\n配置该用户的ssh key进行访问，使得hexo工程中配置好git仓库地址后，可以通过hexo的hexo d命令可以直接编译并推送到服务器上的git仓库。\n\n当有数据推送到服务器的git仓库后，通过git hooks执行复制脚本编译，并把文件复制到/var/ww/blog文件夹下进行访问。\n\n目前博客托管在github上，所以不想维护两个仓库，于是打算采用方式二\n\n### 让jenkins来构建博客  \n\n#### 主要构建过程  \n\nlocal: git push -> github \ngithub: 偶哟，有新的推送，该通知服务器上的jenkins干活了  \njenkins：是博客的仓库诶！拉取过来，执行预先写好的脚本进行编译、部署。搞定~邮件通知下\n\n收到了构建成功邮件，访问博客站点，看到了新博客\n\n------\n\n对于jenkins来说需要配置一个自动构建工程\n\n#### 自动构建工程配置  \n\n创建一个自动构建工程，指定github仓库地址，配上仓库的密钥key，使得jenkins在该仓库有更新时可以拉取数据，写好构建时要执行的shell脚本，当仓库更新并拉取数据后执行该脚本，构建后可以配置邮件通知，详细步骤可以参考网络上大量的教程文章。  \n\n#### 需要的环境准备   \n\n##### jenkins  \n\njenkins运行需要java环境，[jenkins官网](https://jenkins.io/) 下载到war包\n\n```shell\nnohup java -jar jenkins.war --httpPort={对外端口} & \n```\n\n 即可后台启动jenkins  \n\n![](/images/imageForPost/一个成熟的博客/jenkins.png)\n\n用于自动构建的脚本  \n\n```shell\nhexo clean\nnpm install\nhexo g\ncp -r ./public/. /var/www/blog\n```\n\njenkins拉取github仓库的推送后执行目录在/root/.jenkins/workspace/{jenkins工程目录}  \n\n所以脚本也是在jenkins工程目录为起点执行的\n\n##### node.js\n\nnode是一个JavaScript 运行环境，hexo是node.js上的一个静态博客框架，可以使用npm包管理器安装  \n\n```shell\nnpm install -g hexo-cli\n```\n\nhexo为npm安装的应用，目录在  {node应用目录}/lib/node_modules/hexo-cli/bin/目录下，需要将hexo通过ln命令创建一个全局可用的链接： ln -s {hexo真实目录} /usr/local/bin/hexo   \n\nnpm、node等命令出现找不到并确认已经安装即可使用相同方式处理      \n\n##### nginx  \n\nhexo编译结果为静态文件，只需访问index.html文件即可，所以附上nginx配置  \n\n```\nserver {\n    listen       80;\n    server_name  localhost;\n    location / {\n        root   /var/www/blog;\n        index  index.html index.htm;\n    }\n\n}\n\n```\n\n博客文件目录为/var/www/blog/，内容为hexo工程执行hexo g编译后public文件夹下的所有内容\n\nnginx启动默认是nginx用户\n\nnginx的启动配置文件中可以指定执行用户，如果该用户对博客静态文件文件夹没有读权限则访问时会报403 forbidden错误。\n\n------\n\n当环境准备好后hexo就已经是个成熟的博客啦，他可以自己完成部署，不需要我再手动搬运了~\n\n\n\n","slug":"一个成熟的博客","published":1,"updated":"2019-06-03T14:17:39.978Z","layout":"post","photos":[],"link":"","_id":"cjxhbjhi6000163fy0bxzd4kg","content":"<h3 id=\"一个成熟的博客应该学会自己部署啦\"><a href=\"#一个成熟的博客应该学会自己部署啦\" class=\"headerlink\" title=\"一个成熟的博客应该学会自己部署啦\"></a>一个成熟的博客应该学会自己部署啦</h3><p><img src=\"/images/imageForPost/一个成熟的博客/hexo_meitu_2.jpg\" alt=\"hexo_meitu_2\"><br><a id=\"more\"></a></p>\n<h3 id=\"我要干啥\"><a href=\"#我要干啥\" class=\"headerlink\" title=\"我要干啥\"></a>我要干啥</h3><p>通过jenkins自动部署hexo博客，只需要将写好的博客推送到github仓库即可，作为一个记录，所以这不是一篇步骤性的教学文章！只是分享下方法，详细的教学文章很多，只需要打开搜索引擎，输入  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">jenkins </span><br><span class=\"line\">hexo</span><br><span class=\"line\">github</span><br></pre></td></tr></table></figure>\n<p>即可</p>\n<h3 id=\"建博客的缘由\"><a href=\"#建博客的缘由\" class=\"headerlink\" title=\"建博客的缘由\"></a>建博客的缘由</h3><p>虽然到现在还没有写博客，但是博客平台还是要建起来的，万一哪天就有可以写博客的内容了呢。虽然如掘金，简书等各大平台都可以发布博客，已经买了阿里云两年，那自然是要利用起来的，又不想浪费大量时间去从头开始写一个博客工程，那就考虑下现有的可以用来创建博客的工具–hexo吧，作为一个node应用，可以很方便的搭建起来，还能随意换主题，还可以使用github仓库的issues作为评论，只需要node.js环境和npm包管理器，通过nginx作为静态文件服务器就可以进行访问。</p>\n<h3 id=\"如何让hexo自动构建\"><a href=\"#如何让hexo自动构建\" class=\"headerlink\" title=\"如何让hexo自动构建\"></a>如何让hexo自动构建</h3><p>试过两种方法，打算使用github仓库的issues作为评论所以目前使用的是第二种方法  </p>\n<ul>\n<li>服务器搭建git，通过git hooks钩子在推送到git仓库后执行hexo g编译并复制到/var/www/blog文件夹下  </li>\n<li>通过jenkins关联github仓库，发现有推送就进行拉取并执行编译命令，编译完成后复制到web目录下，构建完成后发送邮件进行通知</li>\n</ul>\n<h3 id=\"为什么要让博客自动构建\"><a href=\"#为什么要让博客自动构建\" class=\"headerlink\" title=\"为什么要让博客自动构建\"></a>为什么要让博客自动构建</h3><p>因为我懒啊，最原始方式部署博客的话，通过nginx引出hexo编译后的静态文件进行访问， 所以更新完博客的话需要推送github，然后本地执行hexo g编译再将编译后的文件通过ftp上传。</p>\n<p>第一种方式需要在服务器上创建git用户，并搭建git环境，创建git仓库。</p>\n<p>配置该用户的ssh key进行访问，使得hexo工程中配置好git仓库地址后，可以通过hexo的hexo d命令可以直接编译并推送到服务器上的git仓库。</p>\n<p>当有数据推送到服务器的git仓库后，通过git hooks执行复制脚本编译，并把文件复制到/var/ww/blog文件夹下进行访问。</p>\n<p>目前博客托管在github上，所以不想维护两个仓库，于是打算采用方式二</p>\n<h3 id=\"让jenkins来构建博客\"><a href=\"#让jenkins来构建博客\" class=\"headerlink\" title=\"让jenkins来构建博客\"></a>让jenkins来构建博客</h3><h4 id=\"主要构建过程\"><a href=\"#主要构建过程\" class=\"headerlink\" title=\"主要构建过程\"></a>主要构建过程</h4><p>local: git push -&gt; github<br>github: 偶哟，有新的推送，该通知服务器上的jenkins干活了<br>jenkins：是博客的仓库诶！拉取过来，执行预先写好的脚本进行编译、部署。搞定~邮件通知下</p>\n<p>收到了构建成功邮件，访问博客站点，看到了新博客</p>\n<hr>\n<p>对于jenkins来说需要配置一个自动构建工程</p>\n<h4 id=\"自动构建工程配置\"><a href=\"#自动构建工程配置\" class=\"headerlink\" title=\"自动构建工程配置\"></a>自动构建工程配置</h4><p>创建一个自动构建工程，指定github仓库地址，配上仓库的密钥key，使得jenkins在该仓库有更新时可以拉取数据，写好构建时要执行的shell脚本，当仓库更新并拉取数据后执行该脚本，构建后可以配置邮件通知，详细步骤可以参考网络上大量的教程文章。  </p>\n<h4 id=\"需要的环境准备\"><a href=\"#需要的环境准备\" class=\"headerlink\" title=\"需要的环境准备\"></a>需要的环境准备</h4><h5 id=\"jenkins\"><a href=\"#jenkins\" class=\"headerlink\" title=\"jenkins\"></a>jenkins</h5><p>jenkins运行需要java环境，<a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"noopener\">jenkins官网</a> 下载到war包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nohup java -jar jenkins.war --httpPort=&#123;对外端口&#125; &amp;</span><br></pre></td></tr></table></figure>\n<p> 即可后台启动jenkins  </p>\n<p><img src=\"/images/imageForPost/一个成熟的博客/jenkins.png\" alt></p>\n<p>用于自动构建的脚本  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">cp -r ./public/. /var/www/blog</span><br></pre></td></tr></table></figure>\n<p>jenkins拉取github仓库的推送后执行目录在/root/.jenkins/workspace/{jenkins工程目录}  </p>\n<p>所以脚本也是在jenkins工程目录为起点执行的</p>\n<h5 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h5><p>node是一个JavaScript 运行环境，hexo是node.js上的一个静态博客框架，可以使用npm包管理器安装  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>hexo为npm安装的应用，目录在  {node应用目录}/lib/node_modules/hexo-cli/bin/目录下，需要将hexo通过ln命令创建一个全局可用的链接： ln -s {hexo真实目录} /usr/local/bin/hexo   </p>\n<p>npm、node等命令出现找不到并确认已经安装即可使用相同方式处理      </p>\n<h5 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h5><p>hexo编译结果为静态文件，只需访问index.html文件即可，所以附上nginx配置  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /var/www/blog;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>博客文件目录为/var/www/blog/，内容为hexo工程执行hexo g编译后public文件夹下的所有内容</p>\n<p>nginx启动默认是nginx用户</p>\n<p>nginx的启动配置文件中可以指定执行用户，如果该用户对博客静态文件文件夹没有读权限则访问时会报403 forbidden错误。</p>\n<hr>\n<p>当环境准备好后hexo就已经是个成熟的博客啦，他可以自己完成部署，不需要我再手动搬运了~</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一个成熟的博客应该学会自己部署啦\"><a href=\"#一个成熟的博客应该学会自己部署啦\" class=\"headerlink\" title=\"一个成熟的博客应该学会自己部署啦\"></a>一个成熟的博客应该学会自己部署啦</h3><p><img src=\"/images/imageForPost/一个成熟的博客/hexo_meitu_2.jpg\" alt=\"hexo_meitu_2\"><br>","more":"</p>\n<h3 id=\"我要干啥\"><a href=\"#我要干啥\" class=\"headerlink\" title=\"我要干啥\"></a>我要干啥</h3><p>通过jenkins自动部署hexo博客，只需要将写好的博客推送到github仓库即可，作为一个记录，所以这不是一篇步骤性的教学文章！只是分享下方法，详细的教学文章很多，只需要打开搜索引擎，输入  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">jenkins </span><br><span class=\"line\">hexo</span><br><span class=\"line\">github</span><br></pre></td></tr></table></figure>\n<p>即可</p>\n<h3 id=\"建博客的缘由\"><a href=\"#建博客的缘由\" class=\"headerlink\" title=\"建博客的缘由\"></a>建博客的缘由</h3><p>虽然到现在还没有写博客，但是博客平台还是要建起来的，万一哪天就有可以写博客的内容了呢。虽然如掘金，简书等各大平台都可以发布博客，已经买了阿里云两年，那自然是要利用起来的，又不想浪费大量时间去从头开始写一个博客工程，那就考虑下现有的可以用来创建博客的工具–hexo吧，作为一个node应用，可以很方便的搭建起来，还能随意换主题，还可以使用github仓库的issues作为评论，只需要node.js环境和npm包管理器，通过nginx作为静态文件服务器就可以进行访问。</p>\n<h3 id=\"如何让hexo自动构建\"><a href=\"#如何让hexo自动构建\" class=\"headerlink\" title=\"如何让hexo自动构建\"></a>如何让hexo自动构建</h3><p>试过两种方法，打算使用github仓库的issues作为评论所以目前使用的是第二种方法  </p>\n<ul>\n<li>服务器搭建git，通过git hooks钩子在推送到git仓库后执行hexo g编译并复制到/var/www/blog文件夹下  </li>\n<li>通过jenkins关联github仓库，发现有推送就进行拉取并执行编译命令，编译完成后复制到web目录下，构建完成后发送邮件进行通知</li>\n</ul>\n<h3 id=\"为什么要让博客自动构建\"><a href=\"#为什么要让博客自动构建\" class=\"headerlink\" title=\"为什么要让博客自动构建\"></a>为什么要让博客自动构建</h3><p>因为我懒啊，最原始方式部署博客的话，通过nginx引出hexo编译后的静态文件进行访问， 所以更新完博客的话需要推送github，然后本地执行hexo g编译再将编译后的文件通过ftp上传。</p>\n<p>第一种方式需要在服务器上创建git用户，并搭建git环境，创建git仓库。</p>\n<p>配置该用户的ssh key进行访问，使得hexo工程中配置好git仓库地址后，可以通过hexo的hexo d命令可以直接编译并推送到服务器上的git仓库。</p>\n<p>当有数据推送到服务器的git仓库后，通过git hooks执行复制脚本编译，并把文件复制到/var/ww/blog文件夹下进行访问。</p>\n<p>目前博客托管在github上，所以不想维护两个仓库，于是打算采用方式二</p>\n<h3 id=\"让jenkins来构建博客\"><a href=\"#让jenkins来构建博客\" class=\"headerlink\" title=\"让jenkins来构建博客\"></a>让jenkins来构建博客</h3><h4 id=\"主要构建过程\"><a href=\"#主要构建过程\" class=\"headerlink\" title=\"主要构建过程\"></a>主要构建过程</h4><p>local: git push -&gt; github<br>github: 偶哟，有新的推送，该通知服务器上的jenkins干活了<br>jenkins：是博客的仓库诶！拉取过来，执行预先写好的脚本进行编译、部署。搞定~邮件通知下</p>\n<p>收到了构建成功邮件，访问博客站点，看到了新博客</p>\n<hr>\n<p>对于jenkins来说需要配置一个自动构建工程</p>\n<h4 id=\"自动构建工程配置\"><a href=\"#自动构建工程配置\" class=\"headerlink\" title=\"自动构建工程配置\"></a>自动构建工程配置</h4><p>创建一个自动构建工程，指定github仓库地址，配上仓库的密钥key，使得jenkins在该仓库有更新时可以拉取数据，写好构建时要执行的shell脚本，当仓库更新并拉取数据后执行该脚本，构建后可以配置邮件通知，详细步骤可以参考网络上大量的教程文章。  </p>\n<h4 id=\"需要的环境准备\"><a href=\"#需要的环境准备\" class=\"headerlink\" title=\"需要的环境准备\"></a>需要的环境准备</h4><h5 id=\"jenkins\"><a href=\"#jenkins\" class=\"headerlink\" title=\"jenkins\"></a>jenkins</h5><p>jenkins运行需要java环境，<a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"noopener\">jenkins官网</a> 下载到war包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nohup java -jar jenkins.war --httpPort=&#123;对外端口&#125; &amp;</span><br></pre></td></tr></table></figure>\n<p> 即可后台启动jenkins  </p>\n<p><img src=\"/images/imageForPost/一个成熟的博客/jenkins.png\" alt></p>\n<p>用于自动构建的脚本  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">cp -r ./public/. /var/www/blog</span><br></pre></td></tr></table></figure>\n<p>jenkins拉取github仓库的推送后执行目录在/root/.jenkins/workspace/{jenkins工程目录}  </p>\n<p>所以脚本也是在jenkins工程目录为起点执行的</p>\n<h5 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h5><p>node是一个JavaScript 运行环境，hexo是node.js上的一个静态博客框架，可以使用npm包管理器安装  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>hexo为npm安装的应用，目录在  {node应用目录}/lib/node_modules/hexo-cli/bin/目录下，需要将hexo通过ln命令创建一个全局可用的链接： ln -s {hexo真实目录} /usr/local/bin/hexo   </p>\n<p>npm、node等命令出现找不到并确认已经安装即可使用相同方式处理      </p>\n<h5 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h5><p>hexo编译结果为静态文件，只需访问index.html文件即可，所以附上nginx配置  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /var/www/blog;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>博客文件目录为/var/www/blog/，内容为hexo工程执行hexo g编译后public文件夹下的所有内容</p>\n<p>nginx启动默认是nginx用户</p>\n<p>nginx的启动配置文件中可以指定执行用户，如果该用户对博客静态文件文件夹没有读权限则访问时会报403 forbidden错误。</p>\n<hr>\n<p>当环境准备好后hexo就已经是个成熟的博客啦，他可以自己完成部署，不需要我再手动搬运了~</p>"},{"title":"类加载器","date":"2019-02-24T04:39:04.000Z","comments":0,"_content":"课买了还是得看的，但是总会潜意识里会给自己偷找各种借口，然后就一直拖拖拖...  \n所以准备写这一系列的博客来当做学习笔记，也算是督促自己，毕竟为知识付了费，要学习才能有钱！    \n<!-- more -->\n类加载器，当然是java虚拟机中用来加载各种乱七八糟的类的代码模块，平常开发过程中使用某个自定义或者别人的类的时候，全靠编辑器比如idea自动引入，或者自己写个import（很少有人这么干），那么开发时只要import就好了，程序执行时对虚拟机来说它是怎么找到你要使用的类并且引入的呢？靠的当然是类加载器  \n\n### 类加载器的种类  \n\n常见的类加载器主要有四种  \n\n##### 启动类类加载器 BootstrapClassLoader   \n启动java应用时的加载器，由C++实现，所以在找到它的时候会是个null\n##### 拓展类（平台类）加载器 ExtClassLoader  \n继承自至BootstrapClassLoader，在java9之后被改为平台类加载器，讲道理他们还是一样的，改了个名字？  \n##### 应用加载器 AppClassLoader  \n继承自ExtClassLoader，应用程序加载器，平时引用的jar包的类都是它进行加载的   \n##### 自定义的加载器  \n只要继承自ClassLoader，上面提到的类加载器不能用来被继承，因为有访问权限，自定义的话无法取得。自定义的加载器，java有个双亲委派模型需要准守，是个默认规范，不遵守..也没事(建议遵守)  \n###  双亲委派模型   \n在自定义加载器那里提到了双亲委派模型，那什么是双亲委派模型呢？    \n类加载器存在继承结构，最顶层父类是BootstrapClassLoader，如果一个自定义的类加载器想要加载一个类，比如想加载一个String类，那么自定义的类加载器不应该自己去查找这个class对象，而是应该委托它的父类去查找、加载，它的父类又会委托自己的父类去查找、加载，一层层往上，父类加载器表示说我找不到这个类，子加载器才会自行去查找。这样就可以保证类只被加载一次。  \n在虚拟机中，一个类的唯一性并不仅仅是靠它的完全限定名来确定的，一个类的完全限定名+对应的类加载器才能唯一确定在虚拟机中的一个类。  \n在自定义类加载器的时候是需要遵循这个规范的，然鹅其实并没有强制措施，实现自定义的类加载器主要是重写findClass方法。  \n来看一眼loadClass方法  \n```  \n  protected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // If still not found, then invoke findClass in order\n                    // to find the class.\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n\n```\n它主要的操作就是先检查要找的类是否被加载了，没有的话parent为null的时候即是BootstrapClassLoader的时候就调findBootstrapClassOrNull方法查找，不然就是调用父类的loadClass方法查找，如果都没有就调用自己的findClass方法。     \n那这个findClass方法就是自定义classLoader的时候要重写的方法了。     \n### 链接\n并不是类加载完了就直接使用的，还需要链接，链接分为验证、准备、解析三个阶段\n验证主要是用来校验类文件符合虚拟机的约束条件，然后进行准备阶段  \n准备阶段主要是为该类的静态字段分配内存，初始化静态字段是会在初始化阶段进行的。\n解析阶段主要是生成对类方法和字段的引用的地址  \n在其他类引用某个类的时候，比如类A的a方法，写成  \n```\nA aObject = new A();\naObject.a();\n```\n进行编译后，会生成类，方法以及参数等的符号引用，用来指代这些方法。  \n所以解析的时候是将这些符号引用变成实际引用。  \n### 初始化  \n类中的静态字段和静态代码块都会被放入clinit方法中，在类加载的初始化过程中为这些赋值，以及执行静态代码块的内容，执行完初始化后类才可被用。  \n想起来以前不知道在哪看到的一个说法，static静态代码块的代码是在new对象时才会执行的说法是错误的。  \n比如下面这个类  \n```  \npublic class test {\n    public static int a = 1;\n    static{\n        System.out.println(\"hhhhh\");\n    }\n}\n```\n进行这样调用时  \n```  \npublic class main {\n    public static void main(String[] args) {\n        System.out.println(\"要打印了\");\n\n        System.out.println(test.a);\n        new test();\n    }\n}\n```\n结果是    \n\n![](/images/imageForPost/类加载器-pic-1.png)\n\n...还是多动动手比较好\n\n\n\n\n","source":"_posts/java虚拟机/类加载器.md","raw":"---\ntitle: 类加载器\ndate: 2019-02-24 12:39:04\ncomments: false\ncategories: \n- 买的课怎么也得学完\ntags: \n- java\n---\n课买了还是得看的，但是总会潜意识里会给自己偷找各种借口，然后就一直拖拖拖...  \n所以准备写这一系列的博客来当做学习笔记，也算是督促自己，毕竟为知识付了费，要学习才能有钱！    \n<!-- more -->\n类加载器，当然是java虚拟机中用来加载各种乱七八糟的类的代码模块，平常开发过程中使用某个自定义或者别人的类的时候，全靠编辑器比如idea自动引入，或者自己写个import（很少有人这么干），那么开发时只要import就好了，程序执行时对虚拟机来说它是怎么找到你要使用的类并且引入的呢？靠的当然是类加载器  \n\n### 类加载器的种类  \n\n常见的类加载器主要有四种  \n\n##### 启动类类加载器 BootstrapClassLoader   \n启动java应用时的加载器，由C++实现，所以在找到它的时候会是个null\n##### 拓展类（平台类）加载器 ExtClassLoader  \n继承自至BootstrapClassLoader，在java9之后被改为平台类加载器，讲道理他们还是一样的，改了个名字？  \n##### 应用加载器 AppClassLoader  \n继承自ExtClassLoader，应用程序加载器，平时引用的jar包的类都是它进行加载的   \n##### 自定义的加载器  \n只要继承自ClassLoader，上面提到的类加载器不能用来被继承，因为有访问权限，自定义的话无法取得。自定义的加载器，java有个双亲委派模型需要准守，是个默认规范，不遵守..也没事(建议遵守)  \n###  双亲委派模型   \n在自定义加载器那里提到了双亲委派模型，那什么是双亲委派模型呢？    \n类加载器存在继承结构，最顶层父类是BootstrapClassLoader，如果一个自定义的类加载器想要加载一个类，比如想加载一个String类，那么自定义的类加载器不应该自己去查找这个class对象，而是应该委托它的父类去查找、加载，它的父类又会委托自己的父类去查找、加载，一层层往上，父类加载器表示说我找不到这个类，子加载器才会自行去查找。这样就可以保证类只被加载一次。  \n在虚拟机中，一个类的唯一性并不仅仅是靠它的完全限定名来确定的，一个类的完全限定名+对应的类加载器才能唯一确定在虚拟机中的一个类。  \n在自定义类加载器的时候是需要遵循这个规范的，然鹅其实并没有强制措施，实现自定义的类加载器主要是重写findClass方法。  \n来看一眼loadClass方法  \n```  \n  protected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // If still not found, then invoke findClass in order\n                    // to find the class.\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n\n```\n它主要的操作就是先检查要找的类是否被加载了，没有的话parent为null的时候即是BootstrapClassLoader的时候就调findBootstrapClassOrNull方法查找，不然就是调用父类的loadClass方法查找，如果都没有就调用自己的findClass方法。     \n那这个findClass方法就是自定义classLoader的时候要重写的方法了。     \n### 链接\n并不是类加载完了就直接使用的，还需要链接，链接分为验证、准备、解析三个阶段\n验证主要是用来校验类文件符合虚拟机的约束条件，然后进行准备阶段  \n准备阶段主要是为该类的静态字段分配内存，初始化静态字段是会在初始化阶段进行的。\n解析阶段主要是生成对类方法和字段的引用的地址  \n在其他类引用某个类的时候，比如类A的a方法，写成  \n```\nA aObject = new A();\naObject.a();\n```\n进行编译后，会生成类，方法以及参数等的符号引用，用来指代这些方法。  \n所以解析的时候是将这些符号引用变成实际引用。  \n### 初始化  \n类中的静态字段和静态代码块都会被放入clinit方法中，在类加载的初始化过程中为这些赋值，以及执行静态代码块的内容，执行完初始化后类才可被用。  \n想起来以前不知道在哪看到的一个说法，static静态代码块的代码是在new对象时才会执行的说法是错误的。  \n比如下面这个类  \n```  \npublic class test {\n    public static int a = 1;\n    static{\n        System.out.println(\"hhhhh\");\n    }\n}\n```\n进行这样调用时  \n```  \npublic class main {\n    public static void main(String[] args) {\n        System.out.println(\"要打印了\");\n\n        System.out.println(test.a);\n        new test();\n    }\n}\n```\n结果是    \n\n![](/images/imageForPost/类加载器-pic-1.png)\n\n...还是多动动手比较好\n\n\n\n\n","slug":"java虚拟机/类加载器","published":1,"updated":"2019-06-03T14:17:39.977Z","layout":"post","photos":[],"link":"","_id":"cjxhbjhk3000863fyun32niir","content":"<p>课买了还是得看的，但是总会潜意识里会给自己偷找各种借口，然后就一直拖拖拖…<br>所以准备写这一系列的博客来当做学习笔记，也算是督促自己，毕竟为知识付了费，要学习才能有钱！<br><a id=\"more\"></a><br>类加载器，当然是java虚拟机中用来加载各种乱七八糟的类的代码模块，平常开发过程中使用某个自定义或者别人的类的时候，全靠编辑器比如idea自动引入，或者自己写个import（很少有人这么干），那么开发时只要import就好了，程序执行时对虚拟机来说它是怎么找到你要使用的类并且引入的呢？靠的当然是类加载器  </p>\n<h3 id=\"类加载器的种类\"><a href=\"#类加载器的种类\" class=\"headerlink\" title=\"类加载器的种类\"></a>类加载器的种类</h3><p>常见的类加载器主要有四种  </p>\n<h5 id=\"启动类类加载器-BootstrapClassLoader\"><a href=\"#启动类类加载器-BootstrapClassLoader\" class=\"headerlink\" title=\"启动类类加载器 BootstrapClassLoader\"></a>启动类类加载器 BootstrapClassLoader</h5><p>启动java应用时的加载器，由C++实现，所以在找到它的时候会是个null</p>\n<h5 id=\"拓展类（平台类）加载器-ExtClassLoader\"><a href=\"#拓展类（平台类）加载器-ExtClassLoader\" class=\"headerlink\" title=\"拓展类（平台类）加载器 ExtClassLoader\"></a>拓展类（平台类）加载器 ExtClassLoader</h5><p>继承自至BootstrapClassLoader，在java9之后被改为平台类加载器，讲道理他们还是一样的，改了个名字？  </p>\n<h5 id=\"应用加载器-AppClassLoader\"><a href=\"#应用加载器-AppClassLoader\" class=\"headerlink\" title=\"应用加载器 AppClassLoader\"></a>应用加载器 AppClassLoader</h5><p>继承自ExtClassLoader，应用程序加载器，平时引用的jar包的类都是它进行加载的   </p>\n<h5 id=\"自定义的加载器\"><a href=\"#自定义的加载器\" class=\"headerlink\" title=\"自定义的加载器\"></a>自定义的加载器</h5><p>只要继承自ClassLoader，上面提到的类加载器不能用来被继承，因为有访问权限，自定义的话无法取得。自定义的加载器，java有个双亲委派模型需要准守，是个默认规范，不遵守..也没事(建议遵守)  </p>\n<h3 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h3><p>在自定义加载器那里提到了双亲委派模型，那什么是双亲委派模型呢？<br>类加载器存在继承结构，最顶层父类是BootstrapClassLoader，如果一个自定义的类加载器想要加载一个类，比如想加载一个String类，那么自定义的类加载器不应该自己去查找这个class对象，而是应该委托它的父类去查找、加载，它的父类又会委托自己的父类去查找、加载，一层层往上，父类加载器表示说我找不到这个类，子加载器才会自行去查找。这样就可以保证类只被加载一次。<br>在虚拟机中，一个类的唯一性并不仅仅是靠它的完全限定名来确定的，一个类的完全限定名+对应的类加载器才能唯一确定在虚拟机中的一个类。<br>在自定义类加载器的时候是需要遵循这个规范的，然鹅其实并没有强制措施，实现自定义的类加载器主要是重写findClass方法。<br>来看一眼loadClass方法<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span><br><span class=\"line\">      throws ClassNotFoundException</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      synchronized (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">          // First, check if the class has already been loaded</span><br><span class=\"line\">          Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">          if (c == null) &#123;</span><br><span class=\"line\">              long t0 = System.nanoTime();</span><br><span class=\"line\">              try &#123;</span><br><span class=\"line\">                  if (parent != null) &#123;</span><br><span class=\"line\">                      c = parent.loadClass(name, false);</span><br><span class=\"line\">                  &#125; else &#123;</span><br><span class=\"line\">                      c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                  // ClassNotFoundException thrown if class not found</span><br><span class=\"line\">                  // from the non-null parent class loader</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              if (c == null) &#123;</span><br><span class=\"line\">                  // If still not found, then invoke findClass in order</span><br><span class=\"line\">                  // to find the class.</span><br><span class=\"line\">                  long t1 = System.nanoTime();</span><br><span class=\"line\">                  c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                  // this is the defining class loader; record the stats</span><br><span class=\"line\">                  sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                  sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                  sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (resolve) &#123;</span><br><span class=\"line\">              resolveClass(c);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>它主要的操作就是先检查要找的类是否被加载了，没有的话parent为null的时候即是BootstrapClassLoader的时候就调findBootstrapClassOrNull方法查找，不然就是调用父类的loadClass方法查找，如果都没有就调用自己的findClass方法。<br>那这个findClass方法就是自定义classLoader的时候要重写的方法了。     </p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>并不是类加载完了就直接使用的，还需要链接，链接分为验证、准备、解析三个阶段<br>验证主要是用来校验类文件符合虚拟机的约束条件，然后进行准备阶段<br>准备阶段主要是为该类的静态字段分配内存，初始化静态字段是会在初始化阶段进行的。<br>解析阶段主要是生成对类方法和字段的引用的地址<br>在其他类引用某个类的时候，比如类A的a方法，写成<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">A aObject = new A();</span><br><span class=\"line\">aObject.a();</span><br></pre></td></tr></table></figure></p>\n<p>进行编译后，会生成类，方法以及参数等的符号引用，用来指代这些方法。<br>所以解析的时候是将这些符号引用变成实际引用。  </p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>类中的静态字段和静态代码块都会被放入clinit方法中，在类加载的初始化过程中为这些赋值，以及执行静态代码块的内容，执行完初始化后类才可被用。<br>想起来以前不知道在哪看到的一个说法，static静态代码块的代码是在new对象时才会执行的说法是错误的。<br>比如下面这个类<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class test &#123;</span><br><span class=\"line\">    public static int a = 1;</span><br><span class=\"line\">    static&#123;</span><br><span class=\"line\">        System.out.println(&quot;hhhhh&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进行这样调用时<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;要打印了&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.a);</span><br><span class=\"line\">        new test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果是    </p>\n<p><img src=\"/images/imageForPost/类加载器-pic-1.png\" alt></p>\n<p>…还是多动动手比较好</p>\n","site":{"data":{}},"excerpt":"<p>课买了还是得看的，但是总会潜意识里会给自己偷找各种借口，然后就一直拖拖拖…<br>所以准备写这一系列的博客来当做学习笔记，也算是督促自己，毕竟为知识付了费，要学习才能有钱！<br>","more":"<br>类加载器，当然是java虚拟机中用来加载各种乱七八糟的类的代码模块，平常开发过程中使用某个自定义或者别人的类的时候，全靠编辑器比如idea自动引入，或者自己写个import（很少有人这么干），那么开发时只要import就好了，程序执行时对虚拟机来说它是怎么找到你要使用的类并且引入的呢？靠的当然是类加载器  </p>\n<h3 id=\"类加载器的种类\"><a href=\"#类加载器的种类\" class=\"headerlink\" title=\"类加载器的种类\"></a>类加载器的种类</h3><p>常见的类加载器主要有四种  </p>\n<h5 id=\"启动类类加载器-BootstrapClassLoader\"><a href=\"#启动类类加载器-BootstrapClassLoader\" class=\"headerlink\" title=\"启动类类加载器 BootstrapClassLoader\"></a>启动类类加载器 BootstrapClassLoader</h5><p>启动java应用时的加载器，由C++实现，所以在找到它的时候会是个null</p>\n<h5 id=\"拓展类（平台类）加载器-ExtClassLoader\"><a href=\"#拓展类（平台类）加载器-ExtClassLoader\" class=\"headerlink\" title=\"拓展类（平台类）加载器 ExtClassLoader\"></a>拓展类（平台类）加载器 ExtClassLoader</h5><p>继承自至BootstrapClassLoader，在java9之后被改为平台类加载器，讲道理他们还是一样的，改了个名字？  </p>\n<h5 id=\"应用加载器-AppClassLoader\"><a href=\"#应用加载器-AppClassLoader\" class=\"headerlink\" title=\"应用加载器 AppClassLoader\"></a>应用加载器 AppClassLoader</h5><p>继承自ExtClassLoader，应用程序加载器，平时引用的jar包的类都是它进行加载的   </p>\n<h5 id=\"自定义的加载器\"><a href=\"#自定义的加载器\" class=\"headerlink\" title=\"自定义的加载器\"></a>自定义的加载器</h5><p>只要继承自ClassLoader，上面提到的类加载器不能用来被继承，因为有访问权限，自定义的话无法取得。自定义的加载器，java有个双亲委派模型需要准守，是个默认规范，不遵守..也没事(建议遵守)  </p>\n<h3 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h3><p>在自定义加载器那里提到了双亲委派模型，那什么是双亲委派模型呢？<br>类加载器存在继承结构，最顶层父类是BootstrapClassLoader，如果一个自定义的类加载器想要加载一个类，比如想加载一个String类，那么自定义的类加载器不应该自己去查找这个class对象，而是应该委托它的父类去查找、加载，它的父类又会委托自己的父类去查找、加载，一层层往上，父类加载器表示说我找不到这个类，子加载器才会自行去查找。这样就可以保证类只被加载一次。<br>在虚拟机中，一个类的唯一性并不仅仅是靠它的完全限定名来确定的，一个类的完全限定名+对应的类加载器才能唯一确定在虚拟机中的一个类。<br>在自定义类加载器的时候是需要遵循这个规范的，然鹅其实并没有强制措施，实现自定义的类加载器主要是重写findClass方法。<br>来看一眼loadClass方法<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span><br><span class=\"line\">      throws ClassNotFoundException</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      synchronized (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">          // First, check if the class has already been loaded</span><br><span class=\"line\">          Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">          if (c == null) &#123;</span><br><span class=\"line\">              long t0 = System.nanoTime();</span><br><span class=\"line\">              try &#123;</span><br><span class=\"line\">                  if (parent != null) &#123;</span><br><span class=\"line\">                      c = parent.loadClass(name, false);</span><br><span class=\"line\">                  &#125; else &#123;</span><br><span class=\"line\">                      c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                  // ClassNotFoundException thrown if class not found</span><br><span class=\"line\">                  // from the non-null parent class loader</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              if (c == null) &#123;</span><br><span class=\"line\">                  // If still not found, then invoke findClass in order</span><br><span class=\"line\">                  // to find the class.</span><br><span class=\"line\">                  long t1 = System.nanoTime();</span><br><span class=\"line\">                  c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                  // this is the defining class loader; record the stats</span><br><span class=\"line\">                  sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                  sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                  sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (resolve) &#123;</span><br><span class=\"line\">              resolveClass(c);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>它主要的操作就是先检查要找的类是否被加载了，没有的话parent为null的时候即是BootstrapClassLoader的时候就调findBootstrapClassOrNull方法查找，不然就是调用父类的loadClass方法查找，如果都没有就调用自己的findClass方法。<br>那这个findClass方法就是自定义classLoader的时候要重写的方法了。     </p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>并不是类加载完了就直接使用的，还需要链接，链接分为验证、准备、解析三个阶段<br>验证主要是用来校验类文件符合虚拟机的约束条件，然后进行准备阶段<br>准备阶段主要是为该类的静态字段分配内存，初始化静态字段是会在初始化阶段进行的。<br>解析阶段主要是生成对类方法和字段的引用的地址<br>在其他类引用某个类的时候，比如类A的a方法，写成<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">A aObject = new A();</span><br><span class=\"line\">aObject.a();</span><br></pre></td></tr></table></figure></p>\n<p>进行编译后，会生成类，方法以及参数等的符号引用，用来指代这些方法。<br>所以解析的时候是将这些符号引用变成实际引用。  </p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>类中的静态字段和静态代码块都会被放入clinit方法中，在类加载的初始化过程中为这些赋值，以及执行静态代码块的内容，执行完初始化后类才可被用。<br>想起来以前不知道在哪看到的一个说法，static静态代码块的代码是在new对象时才会执行的说法是错误的。<br>比如下面这个类<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class test &#123;</span><br><span class=\"line\">    public static int a = 1;</span><br><span class=\"line\">    static&#123;</span><br><span class=\"line\">        System.out.println(&quot;hhhhh&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进行这样调用时<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;要打印了&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.a);</span><br><span class=\"line\">        new test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果是    </p>\n<p><img src=\"/images/imageForPost/类加载器-pic-1.png\" alt></p>\n<p>…还是多动动手比较好</p>"},{"title":"虚拟机如何执行方法调用","date":"2019-03-30T14:02:16.000Z","comments":0,"_content":"building```","source":"_posts/java虚拟机/虚拟机如何执行方法调用.md","raw":"---\ntitle: 虚拟机如何执行方法调用\ndate: 2019-03-30 22:02:16\ncomments: false\ncategories: \n- 买的课怎么也得学完\ntags: \n- java\n---\nbuilding```","slug":"java虚拟机/虚拟机如何执行方法调用","published":1,"updated":"2019-06-03T14:17:39.977Z","layout":"post","photos":[],"link":"","_id":"cjxhbjhk4000963fyuubhuxbl","content":"<p>building<code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>building<code>`</code></p>\n"},{"title":"JAVA 动态代理与Spring AOP","date":"2019-06-26T13:02:16.000Z","comments":0,"_content":"\n疯狂加班之后终于有两天是早点下班的了—。\n\n这两天看java核心技术36讲（倒不如是说有点像面试角度java36问）的时候有提到了动态代理说基于什么原理？\n说到动态代理，对应就会有静态代理，说到代理，应该也会提到反射，以及常见的使用到了动态代理的应用—Spring的AOP  \n对于Spring AOP仅限于知道怎么用，对于反射也只是之前在工作中有个需求通过反射去get set值可以节约大量的工作量从而简单使用过，对于其中的一些常见的概念印象却不深。  \n\n* 静态代理\n* 动态代理\n\t* jdk动态代理\n\t* cglib动态代理。\n* Spring AOP中是怎么使用到动态代理的\n* 在spring的Cglib2AopProxy中使用到的transient关键字是做什么的\n\n## 先来说说java的三种代理模式。\n\n代理模式proxy是一种设计模式，假设目标对象A有功能functionA()，只负责他对应的业务逻辑，而调用时想在业务逻辑之前或者之后想打印些系统日志，这时候存在一个对A的增强对象proxyA，扩展了A的功能，使得通过代理对象proxyA访问目标对象A，在目标对象A实现功能的基础上扩展了额外的系统日志打印功能，在不修改A的基础上扩展了目标A的功能并且调用目标对象。\n### 静态代理\n\n**静态代理的时候首先需要有一个接口或者父类供代理类和目标类一同实现或继承**。\n代码如下\n接口**IBussiness.java**  \n\n```java\npublic interface IBussiness {\n        void doSomething();\n}\n\n```\n\n\n\n目标类**Target.java**  \n\n```java\npublic class Target implements IBussiness{\n    @Override\n    \tpublic void doSomething() {\n        System.out.println(\"do something\");\n    \t}\n}\n```\n\n\n代理类**TargetProxy.java**  \n\n```java\npublic class TargetProxy implements IBussiness{\n\tprivate IBussiness target;\n\n\tpublic TargetProxy(IBussiness target) {\n    this.target = target;\n\t}\n\n\t@Override\n\tpublic void doSomething() {\n    System.out.println(\"before do something\");\n    target.doSomething();\n    System.out.println(\"after do something\");\n\t}\n}\n```\n\n\n测试类**AppTest.java**  \n```java\npublic class AppTest {\n    /**\n     * Rigorous Test :-)\n     */\n    @Test\n    public void shouldAnswerWithTrue()\n    {\n        assertTrue( true );\n        Target target = new Target();\n    \n        TargetProxy proxy = new TargetProxy(target);\n    \n        proxy.doSomething();\n    }\n}\n```\n\n运行结果\n![静态代理图1](/images/imageForPost/笔记/动态代理/静态代理图1.png)\n\n------\n\n​\t\t可见代理可以在不修改目标对象的情况下扩展对应的功能，但是代理对象和目标对象要实现相同的接口，如果业务中存在大量需要被代理的类则会增加很多不必要的维护工作。\n​\t\t为了解决这一问题，可以看下jdk动态代理。\n​\t\t动态代理不要求代理类与目标类实现相同的接口，但是目标类要求实现接口，通过在运行时创建实现了指定接口的对象来实现目标对象的扩展。\n### JDK动态代理\n主要使用到**java.lang.reflect**的**Proxy**类的**newProxyInstance**方法 \n\n```java\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)throws IllegalArgumentException\n```\n\n主要有三个参数 \n* ClassLoader loader  \n\n  ClassLoader 类加载器，用来加载生成的类，类加载器可以参考这篇\n\n  [这篇]: \n\n  \n\n* Class<?>[] interfaces\n\n\tinterfaces  代理类实现的被代理类的接口。\n\n* InvocationHandler h  \n\tInvocationHandler 代理类的扩展处理器，具体扩展逻辑在该处理器中实现。\n------\n继续使用上面用到的**IBussiness.java** 接口\n代理处理器**ProxyInvocationHandler.java**\n\n```java\npublic class ProxyInvocationHandler implements  InvocationHandler {\n        \n    \t//被代理的目标对象\n      private Object target;\n        \n      public ProxyInvocationHandler(Object target) {\n        this.target = target;\n      }\n        \n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      System.out.println(\"before do something\");\n      //通过反射调用目标对象的方法，如果invoke传入代理对象则会出现递归调用代理对象的代理方法\n      Object result = method.invoke(target, args);\n      System.out.println(\"after do something\");\n      return result;\n      }\n\n\n      public Object getProxy(){\n        return Proxy.newProxyInstance(this.getClass().getClassLoader(),\ttarget.getClass().getInterfaces(), this);\n    \n      }\n}\n\n```\n\n测试类**JdkProxy.java**\n```java\npublic class JdkProxy {\n\t@Test\n\tpublic void shouldAnswerWithTrue(){\n       IBussiness target = new Target();\n    \n       IBussiness proxyObj = (IBussiness) new ProxyInvocationHandler(target).getProxy();\n    \n       proxyObj.doSomething();\n\t}\n}\n```\n执行效果\n\n![jdk代理图1](/images/imageForPost/笔记/动态代理/jdk代理图1.png)\n\n------\n\n\n\n### cglib的代理\n\t与jdk代理不同的是cglib代理是通过运行时通过字节码库生成目标对象的子类，所以不需要像jdk代理一样目标对象需要实现接口，Spring AOP中就是根据目标对象是否实现了接口来确定使用jdk代理还是cglib代理，具体的选择在后面会讲。\n\n测试工程使用的是**maven**，所以在工程**pom**中添加cglib的依赖\n```shell\n    <dependency>\n      <groupId>cglib</groupId>\n      <artifactId>cglib</artifactId>\n      <version>3.1</version>\n    </dependency>\n```\n\n继续使用上面用到的**IBussiness.java** 接口\n代理处理器**CglibProxy.java**\n\n```java\npublic class CglibProxy implements MethodInterceptor {\n    \n    //目标对象\n    private Object target;\n    \n    public CglibProxy(Object target) {\n        this.target = target;\n    }\n    \n    public Object getProxyObj(){\n        //cglib工具类\n        Enhancer en = new Enhancer();\n        //设置被代理对象\n        en.setSuperclass(target.getClass());\n        //设置扩展处理器\n        en.setCallback(this);\n        //返回代理对象\n        return en.create();\n    }\n    \n    @Override\n    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        System.out.println(\"before do something by cglib\");\n        Object result = method.invoke(target, args);\n        System.out.println(\"after do something by cglib\");\n        return result;\n    }\n}\n```\n测试类**CglibProxyTest.java**\n```java\npublic class CglibProxyTest {\n    @Test\n    public void shouldAnswerWithTrue()\n    {\n        IBussiness target = new Target();\n    \n        IBussiness proxyObj = (IBussiness) new CglibProxy(target).getProxyObj();\n    \n        proxyObj.doSomething();\n\n\n    }\n}\n```\n\n运行结果\n\n![cglib代理图1](/images/imageForPost/笔记/动态代理/cglib代理图1.png)\n\n可见cglib和jdk代理在代码结构上非常类似，Spring AOP则是使用这两种方式创建代理，Spring AOP中代理的扩展方法即advice扩展方法是另外指定的，而前面的代理扩展则是写死的，如何使得代理类能使用我们指定的方法呢，像AOP一样可以使用前置通知、后置通知和环绕通知。最简单的方法就是给**ProxyInvocationHandler**的构造方法传入想要用来扩展的方法，然后在目标对象方法的invoke之前调用扩展方法即可。\n接下来简单的看下Spring的AOP\n手边的工程是用的Spring 3.0.5版本\n在**org.springframework.aop.framework**包下的**DefaultAopProxyFactory**类中有个**public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException** 方法\n\n```java\npublic AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {\n        if (!config.isOptimize() && !config.isProxyTargetClass() && !this.hasNoUserSuppliedProxyInterfaces(config)) {\n            return new JdkDynamicAopProxy(config);\n        } else {\n            Class targetClass = config.getTargetClass();\n            if (targetClass == null) {\n                throw new AopConfigException(\"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation.\");\n            } else if (targetClass.isInterface()) {\n                return new JdkDynamicAopProxy(config);\n            } else if (!cglibAvailable) {\n                throw new AopConfigException(\"Cannot proxy target class because CGLIB2 is not available. Add CGLIB to the class path or specify proxy interfaces.\");\n            } else {\n                return DefaultAopProxyFactory.CglibProxyFactory.createCglibProxy(config);\n            }\n        }\n}\n```\n会根据被代理对象是否有实现接口来选择使用jdk代理还是cglib代理\n跟进**JdkDynamicAopProxy**类可以看到**getProxy()**方法通过**Proxy.newProxyInstance**返回了一个代理对象\n\n```java\npublic Object getProxy(ClassLoader classLoader) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Creating JDK dynamic proxy: target source is \" + this.advised.getTargetSource());\n        }\n    \n        Class[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised);\n        this.findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);\n        return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);\n}\n```\n\n\n跟进,则可以看到对应的**getProxy()**方法\n```java\npublic Object getProxy(ClassLoader classLoader) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Creating CGLIB2 proxy: target source is \" + this.advised.getTargetSource());\n        }\n    \n        try {\n            Class rootClass = this.advised.getTargetClass();\n            Assert.state(rootClass != null, \"Target class must be available for creating a CGLIB proxy\");\n            Class proxySuperClass = rootClass;\n            int x;\n            if (AopUtils.isCglibProxyClass(rootClass)) {\n                proxySuperClass = rootClass.getSuperclass();\n                Class[] additionalInterfaces = rootClass.getInterfaces();\n                Class[] var8 = additionalInterfaces;\n                x = additionalInterfaces.length;\n    \n                for(int var6 = 0; var6 < x; ++var6) {\n                    Class additionalInterface = var8[var6];\n                    this.advised.addInterface(additionalInterface);\n                }\n            }\n    \n            this.validateClassIfNecessary(proxySuperClass);\n            Enhancer enhancer = this.createEnhancer();\n            if (classLoader != null) {\n                enhancer.setClassLoader(classLoader);\n                if (classLoader instanceof SmartClassLoader && ((SmartClassLoader)classLoader).isClassReloadable(proxySuperClass)) {\n                    enhancer.setUseCache(false);\n                }\n            }\n    \n            enhancer.setSuperclass(proxySuperClass);\n            enhancer.setStrategy(new UndeclaredThrowableStrategy(UndeclaredThrowableException.class));\n            enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));\n            enhancer.setInterceptDuringConstruction(false);\n            Callback[] callbacks = this.getCallbacks(rootClass);\n            enhancer.setCallbacks(callbacks);\n            enhancer.setCallbackFilter(new Cglib2AopProxy.ProxyCallbackFilter(this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));\n            Class[] types = new Class[callbacks.length];\n    \n            for(x = 0; x < types.length; ++x) {\n                types[x] = callbacks[x].getClass();\n            }\n    \n            enhancer.setCallbackTypes(types);\n            Object proxy;\n            if (this.constructorArgs != null) {\n                proxy = enhancer.create(this.constructorArgTypes, this.constructorArgs);\n            } else {\n                proxy = enhancer.create();\n            }\n    \n            return proxy;\n        } catch (CodeGenerationException var9) {\n            throw new AopConfigException(\"Could not generate CGLIB subclass of class [\" + this.advised.getTargetClass() + \"]: \" + \"Common causes of this problem include using a final class or a non-visible class\", var9);\n        } catch (IllegalArgumentException var10) {\n            throw new AopConfigException(\"Could not generate CGLIB subclass of class [\" + this.advised.getTargetClass() + \"]: \" + \"Common causes of this problem include using a final class or a non-visible class\", var10);\n        } catch (Exception var11) {\n            throw new AopConfigException(\"Unexpected AOP exception\", var11);\n        }\n}\n```\n\n在**Cglib2AopProxy**的属性中有一个transient关键字，之前基本没看到过（果然是我见识少啊）\n这也是java的关键字之一\n这个关键字用来标示某个属性不被序列化\n定义一个会被序列化的类**TrabsientTest.java**\n\n```java\npublic class TransientTest implements Serializable {\n    \n    private String field1;\n    \n    private transient String field2;\n\n\n    public TransientTest(String field1, String field2) {\n        this.field1 = field1;\n        this.field2 = field2;\n    }\n    public TransientTest() {\n        this.field2 = \"???\";\n    \n    }\n    @Override\n    public String toString() {\n        return \"TransientTest{\" +\n                \"field1='\" + field1 + '\\'' +\n                \", field2='\" + field2 + '\\'' +\n                '}';\n    }\n}\n```\n\n然后创建一个该类的对象并且序列化它 **TestSerial.java**\n```java\npublic class TestSerial {\n    private TransientTest obj;\n    \n    @Test\n    public void shouldAnswerWithTrue()\n    {\n\n\n        TransientTest obj = new TransientTest(\"test1\",\"test2\");\n    \n        System.out.println(obj.toString());\n    \n        try {\n            ObjectOutputStream o = new ObjectOutputStream(new FileOutputStream(\"obj\"));\n            o.writeObject(obj);\n            o.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n\n        try {\n            ObjectInputStream in =new ObjectInputStream(new FileInputStream(\"obj\"));\n            TransientTest logInfoIn = (TransientTest)in.readObject();\n            System.out.println(logInfoIn.toString());\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    \n    }\n}\n```\n结果如图\n\n![transient图1](/images/imageForPost/笔记/动态代理/transient图1.png)\n\n​\t执行后可以看到field2并没有值，在序列化时略过了field2，在反序列化的时候并没有执行构造函数给field2赋值“？？？”，反序列化并不会通过构造函数进行创建对象，而是载入了该类对象的持久化状态。\n","source":"_posts/笔记/JAVA 动态代理与Spring AOP  .md","raw":"---\ntitle: JAVA 动态代理与Spring AOP \ndate: 2019-06-26 21:02:16\ncomments: false\ncategories: \n- 买的课怎么也得学完\ntags: \n- java\n---\n\n疯狂加班之后终于有两天是早点下班的了—。\n\n这两天看java核心技术36讲（倒不如是说有点像面试角度java36问）的时候有提到了动态代理说基于什么原理？\n说到动态代理，对应就会有静态代理，说到代理，应该也会提到反射，以及常见的使用到了动态代理的应用—Spring的AOP  \n对于Spring AOP仅限于知道怎么用，对于反射也只是之前在工作中有个需求通过反射去get set值可以节约大量的工作量从而简单使用过，对于其中的一些常见的概念印象却不深。  \n\n* 静态代理\n* 动态代理\n\t* jdk动态代理\n\t* cglib动态代理。\n* Spring AOP中是怎么使用到动态代理的\n* 在spring的Cglib2AopProxy中使用到的transient关键字是做什么的\n\n## 先来说说java的三种代理模式。\n\n代理模式proxy是一种设计模式，假设目标对象A有功能functionA()，只负责他对应的业务逻辑，而调用时想在业务逻辑之前或者之后想打印些系统日志，这时候存在一个对A的增强对象proxyA，扩展了A的功能，使得通过代理对象proxyA访问目标对象A，在目标对象A实现功能的基础上扩展了额外的系统日志打印功能，在不修改A的基础上扩展了目标A的功能并且调用目标对象。\n### 静态代理\n\n**静态代理的时候首先需要有一个接口或者父类供代理类和目标类一同实现或继承**。\n代码如下\n接口**IBussiness.java**  \n\n```java\npublic interface IBussiness {\n        void doSomething();\n}\n\n```\n\n\n\n目标类**Target.java**  \n\n```java\npublic class Target implements IBussiness{\n    @Override\n    \tpublic void doSomething() {\n        System.out.println(\"do something\");\n    \t}\n}\n```\n\n\n代理类**TargetProxy.java**  \n\n```java\npublic class TargetProxy implements IBussiness{\n\tprivate IBussiness target;\n\n\tpublic TargetProxy(IBussiness target) {\n    this.target = target;\n\t}\n\n\t@Override\n\tpublic void doSomething() {\n    System.out.println(\"before do something\");\n    target.doSomething();\n    System.out.println(\"after do something\");\n\t}\n}\n```\n\n\n测试类**AppTest.java**  \n```java\npublic class AppTest {\n    /**\n     * Rigorous Test :-)\n     */\n    @Test\n    public void shouldAnswerWithTrue()\n    {\n        assertTrue( true );\n        Target target = new Target();\n    \n        TargetProxy proxy = new TargetProxy(target);\n    \n        proxy.doSomething();\n    }\n}\n```\n\n运行结果\n![静态代理图1](/images/imageForPost/笔记/动态代理/静态代理图1.png)\n\n------\n\n​\t\t可见代理可以在不修改目标对象的情况下扩展对应的功能，但是代理对象和目标对象要实现相同的接口，如果业务中存在大量需要被代理的类则会增加很多不必要的维护工作。\n​\t\t为了解决这一问题，可以看下jdk动态代理。\n​\t\t动态代理不要求代理类与目标类实现相同的接口，但是目标类要求实现接口，通过在运行时创建实现了指定接口的对象来实现目标对象的扩展。\n### JDK动态代理\n主要使用到**java.lang.reflect**的**Proxy**类的**newProxyInstance**方法 \n\n```java\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)throws IllegalArgumentException\n```\n\n主要有三个参数 \n* ClassLoader loader  \n\n  ClassLoader 类加载器，用来加载生成的类，类加载器可以参考这篇\n\n  [这篇]: \n\n  \n\n* Class<?>[] interfaces\n\n\tinterfaces  代理类实现的被代理类的接口。\n\n* InvocationHandler h  \n\tInvocationHandler 代理类的扩展处理器，具体扩展逻辑在该处理器中实现。\n------\n继续使用上面用到的**IBussiness.java** 接口\n代理处理器**ProxyInvocationHandler.java**\n\n```java\npublic class ProxyInvocationHandler implements  InvocationHandler {\n        \n    \t//被代理的目标对象\n      private Object target;\n        \n      public ProxyInvocationHandler(Object target) {\n        this.target = target;\n      }\n        \n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      System.out.println(\"before do something\");\n      //通过反射调用目标对象的方法，如果invoke传入代理对象则会出现递归调用代理对象的代理方法\n      Object result = method.invoke(target, args);\n      System.out.println(\"after do something\");\n      return result;\n      }\n\n\n      public Object getProxy(){\n        return Proxy.newProxyInstance(this.getClass().getClassLoader(),\ttarget.getClass().getInterfaces(), this);\n    \n      }\n}\n\n```\n\n测试类**JdkProxy.java**\n```java\npublic class JdkProxy {\n\t@Test\n\tpublic void shouldAnswerWithTrue(){\n       IBussiness target = new Target();\n    \n       IBussiness proxyObj = (IBussiness) new ProxyInvocationHandler(target).getProxy();\n    \n       proxyObj.doSomething();\n\t}\n}\n```\n执行效果\n\n![jdk代理图1](/images/imageForPost/笔记/动态代理/jdk代理图1.png)\n\n------\n\n\n\n### cglib的代理\n\t与jdk代理不同的是cglib代理是通过运行时通过字节码库生成目标对象的子类，所以不需要像jdk代理一样目标对象需要实现接口，Spring AOP中就是根据目标对象是否实现了接口来确定使用jdk代理还是cglib代理，具体的选择在后面会讲。\n\n测试工程使用的是**maven**，所以在工程**pom**中添加cglib的依赖\n```shell\n    <dependency>\n      <groupId>cglib</groupId>\n      <artifactId>cglib</artifactId>\n      <version>3.1</version>\n    </dependency>\n```\n\n继续使用上面用到的**IBussiness.java** 接口\n代理处理器**CglibProxy.java**\n\n```java\npublic class CglibProxy implements MethodInterceptor {\n    \n    //目标对象\n    private Object target;\n    \n    public CglibProxy(Object target) {\n        this.target = target;\n    }\n    \n    public Object getProxyObj(){\n        //cglib工具类\n        Enhancer en = new Enhancer();\n        //设置被代理对象\n        en.setSuperclass(target.getClass());\n        //设置扩展处理器\n        en.setCallback(this);\n        //返回代理对象\n        return en.create();\n    }\n    \n    @Override\n    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        System.out.println(\"before do something by cglib\");\n        Object result = method.invoke(target, args);\n        System.out.println(\"after do something by cglib\");\n        return result;\n    }\n}\n```\n测试类**CglibProxyTest.java**\n```java\npublic class CglibProxyTest {\n    @Test\n    public void shouldAnswerWithTrue()\n    {\n        IBussiness target = new Target();\n    \n        IBussiness proxyObj = (IBussiness) new CglibProxy(target).getProxyObj();\n    \n        proxyObj.doSomething();\n\n\n    }\n}\n```\n\n运行结果\n\n![cglib代理图1](/images/imageForPost/笔记/动态代理/cglib代理图1.png)\n\n可见cglib和jdk代理在代码结构上非常类似，Spring AOP则是使用这两种方式创建代理，Spring AOP中代理的扩展方法即advice扩展方法是另外指定的，而前面的代理扩展则是写死的，如何使得代理类能使用我们指定的方法呢，像AOP一样可以使用前置通知、后置通知和环绕通知。最简单的方法就是给**ProxyInvocationHandler**的构造方法传入想要用来扩展的方法，然后在目标对象方法的invoke之前调用扩展方法即可。\n接下来简单的看下Spring的AOP\n手边的工程是用的Spring 3.0.5版本\n在**org.springframework.aop.framework**包下的**DefaultAopProxyFactory**类中有个**public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException** 方法\n\n```java\npublic AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {\n        if (!config.isOptimize() && !config.isProxyTargetClass() && !this.hasNoUserSuppliedProxyInterfaces(config)) {\n            return new JdkDynamicAopProxy(config);\n        } else {\n            Class targetClass = config.getTargetClass();\n            if (targetClass == null) {\n                throw new AopConfigException(\"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation.\");\n            } else if (targetClass.isInterface()) {\n                return new JdkDynamicAopProxy(config);\n            } else if (!cglibAvailable) {\n                throw new AopConfigException(\"Cannot proxy target class because CGLIB2 is not available. Add CGLIB to the class path or specify proxy interfaces.\");\n            } else {\n                return DefaultAopProxyFactory.CglibProxyFactory.createCglibProxy(config);\n            }\n        }\n}\n```\n会根据被代理对象是否有实现接口来选择使用jdk代理还是cglib代理\n跟进**JdkDynamicAopProxy**类可以看到**getProxy()**方法通过**Proxy.newProxyInstance**返回了一个代理对象\n\n```java\npublic Object getProxy(ClassLoader classLoader) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Creating JDK dynamic proxy: target source is \" + this.advised.getTargetSource());\n        }\n    \n        Class[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised);\n        this.findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);\n        return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);\n}\n```\n\n\n跟进,则可以看到对应的**getProxy()**方法\n```java\npublic Object getProxy(ClassLoader classLoader) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Creating CGLIB2 proxy: target source is \" + this.advised.getTargetSource());\n        }\n    \n        try {\n            Class rootClass = this.advised.getTargetClass();\n            Assert.state(rootClass != null, \"Target class must be available for creating a CGLIB proxy\");\n            Class proxySuperClass = rootClass;\n            int x;\n            if (AopUtils.isCglibProxyClass(rootClass)) {\n                proxySuperClass = rootClass.getSuperclass();\n                Class[] additionalInterfaces = rootClass.getInterfaces();\n                Class[] var8 = additionalInterfaces;\n                x = additionalInterfaces.length;\n    \n                for(int var6 = 0; var6 < x; ++var6) {\n                    Class additionalInterface = var8[var6];\n                    this.advised.addInterface(additionalInterface);\n                }\n            }\n    \n            this.validateClassIfNecessary(proxySuperClass);\n            Enhancer enhancer = this.createEnhancer();\n            if (classLoader != null) {\n                enhancer.setClassLoader(classLoader);\n                if (classLoader instanceof SmartClassLoader && ((SmartClassLoader)classLoader).isClassReloadable(proxySuperClass)) {\n                    enhancer.setUseCache(false);\n                }\n            }\n    \n            enhancer.setSuperclass(proxySuperClass);\n            enhancer.setStrategy(new UndeclaredThrowableStrategy(UndeclaredThrowableException.class));\n            enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));\n            enhancer.setInterceptDuringConstruction(false);\n            Callback[] callbacks = this.getCallbacks(rootClass);\n            enhancer.setCallbacks(callbacks);\n            enhancer.setCallbackFilter(new Cglib2AopProxy.ProxyCallbackFilter(this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));\n            Class[] types = new Class[callbacks.length];\n    \n            for(x = 0; x < types.length; ++x) {\n                types[x] = callbacks[x].getClass();\n            }\n    \n            enhancer.setCallbackTypes(types);\n            Object proxy;\n            if (this.constructorArgs != null) {\n                proxy = enhancer.create(this.constructorArgTypes, this.constructorArgs);\n            } else {\n                proxy = enhancer.create();\n            }\n    \n            return proxy;\n        } catch (CodeGenerationException var9) {\n            throw new AopConfigException(\"Could not generate CGLIB subclass of class [\" + this.advised.getTargetClass() + \"]: \" + \"Common causes of this problem include using a final class or a non-visible class\", var9);\n        } catch (IllegalArgumentException var10) {\n            throw new AopConfigException(\"Could not generate CGLIB subclass of class [\" + this.advised.getTargetClass() + \"]: \" + \"Common causes of this problem include using a final class or a non-visible class\", var10);\n        } catch (Exception var11) {\n            throw new AopConfigException(\"Unexpected AOP exception\", var11);\n        }\n}\n```\n\n在**Cglib2AopProxy**的属性中有一个transient关键字，之前基本没看到过（果然是我见识少啊）\n这也是java的关键字之一\n这个关键字用来标示某个属性不被序列化\n定义一个会被序列化的类**TrabsientTest.java**\n\n```java\npublic class TransientTest implements Serializable {\n    \n    private String field1;\n    \n    private transient String field2;\n\n\n    public TransientTest(String field1, String field2) {\n        this.field1 = field1;\n        this.field2 = field2;\n    }\n    public TransientTest() {\n        this.field2 = \"???\";\n    \n    }\n    @Override\n    public String toString() {\n        return \"TransientTest{\" +\n                \"field1='\" + field1 + '\\'' +\n                \", field2='\" + field2 + '\\'' +\n                '}';\n    }\n}\n```\n\n然后创建一个该类的对象并且序列化它 **TestSerial.java**\n```java\npublic class TestSerial {\n    private TransientTest obj;\n    \n    @Test\n    public void shouldAnswerWithTrue()\n    {\n\n\n        TransientTest obj = new TransientTest(\"test1\",\"test2\");\n    \n        System.out.println(obj.toString());\n    \n        try {\n            ObjectOutputStream o = new ObjectOutputStream(new FileOutputStream(\"obj\"));\n            o.writeObject(obj);\n            o.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n\n        try {\n            ObjectInputStream in =new ObjectInputStream(new FileInputStream(\"obj\"));\n            TransientTest logInfoIn = (TransientTest)in.readObject();\n            System.out.println(logInfoIn.toString());\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    \n    }\n}\n```\n结果如图\n\n![transient图1](/images/imageForPost/笔记/动态代理/transient图1.png)\n\n​\t执行后可以看到field2并没有值，在序列化时略过了field2，在反序列化的时候并没有执行构造函数给field2赋值“？？？”，反序列化并不会通过构造函数进行创建对象，而是载入了该类对象的持久化状态。\n","slug":"笔记/JAVA 动态代理与Spring AOP  ","published":1,"updated":"2019-08-04T05:16:15.951Z","_id":"cjxhbjhkj000i63fyhydnwkbm","layout":"post","photos":[],"link":"","content":"<p>疯狂加班之后终于有两天是早点下班的了—。</p>\n<p>这两天看java核心技术36讲（倒不如是说有点像面试角度java36问）的时候有提到了动态代理说基于什么原理？<br>说到动态代理，对应就会有静态代理，说到代理，应该也会提到反射，以及常见的使用到了动态代理的应用—Spring的AOP<br>对于Spring AOP仅限于知道怎么用，对于反射也只是之前在工作中有个需求通过反射去get set值可以节约大量的工作量从而简单使用过，对于其中的一些常见的概念印象却不深。  </p>\n<ul>\n<li>静态代理</li>\n<li>动态代理<ul>\n<li>jdk动态代理</li>\n<li>cglib动态代理。</li>\n</ul>\n</li>\n<li>Spring AOP中是怎么使用到动态代理的</li>\n<li>在spring的Cglib2AopProxy中使用到的transient关键字是做什么的</li>\n</ul>\n<h2 id=\"先来说说java的三种代理模式。\"><a href=\"#先来说说java的三种代理模式。\" class=\"headerlink\" title=\"先来说说java的三种代理模式。\"></a>先来说说java的三种代理模式。</h2><p>代理模式proxy是一种设计模式，假设目标对象A有功能functionA()，只负责他对应的业务逻辑，而调用时想在业务逻辑之前或者之后想打印些系统日志，这时候存在一个对A的增强对象proxyA，扩展了A的功能，使得通过代理对象proxyA访问目标对象A，在目标对象A实现功能的基础上扩展了额外的系统日志打印功能，在不修改A的基础上扩展了目标A的功能并且调用目标对象。</p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p><strong>静态代理的时候首先需要有一个接口或者父类供代理类和目标类一同实现或继承</strong>。<br>代码如下<br>接口<strong>IBussiness.java</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBussiness</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目标类<strong>Target.java</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBussiness</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"do something\"</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代理类<strong>TargetProxy.java</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TargetProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBussiness</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> IBussiness target;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TargetProxy</span><span class=\"params\">(IBussiness target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"before do something\"</span>);</span><br><span class=\"line\">    target.doSomething();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"after do something\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类<strong>AppTest.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Rigorous Test :-)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldAnswerWithTrue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        assertTrue( <span class=\"keyword\">true</span> );</span><br><span class=\"line\">        Target target = <span class=\"keyword\">new</span> Target();</span><br><span class=\"line\">    </span><br><span class=\"line\">        TargetProxy proxy = <span class=\"keyword\">new</span> TargetProxy(target);</span><br><span class=\"line\">    </span><br><span class=\"line\">        proxy.doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><img src=\"/images/imageForPost/笔记/动态代理/静态代理图1.png\" alt=\"静态代理图1\"></p>\n<hr>\n<p>​        可见代理可以在不修改目标对象的情况下扩展对应的功能，但是代理对象和目标对象要实现相同的接口，如果业务中存在大量需要被代理的类则会增加很多不必要的维护工作。<br>​        为了解决这一问题，可以看下jdk动态代理。<br>​        动态代理不要求代理类与目标类实现相同的接口，但是目标类要求实现接口，通过在运行时创建实现了指定接口的对象来实现目标对象的扩展。</p>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><p>主要使用到<strong>java.lang.reflect</strong>的<strong>Proxy</strong>类的<strong>newProxyInstance</strong>方法 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          InvocationHandler h)</span><span class=\"keyword\">throws</span> IllegalArgumentException</span></span><br></pre></td></tr></table></figure>\n<p>主要有三个参数 </p>\n<ul>\n<li><p>ClassLoader loader  </p>\n<p>ClassLoader 类加载器，用来加载生成的类，类加载器可以参考这篇</p>\n<p>[这篇]: </p>\n</li>\n</ul>\n<ul>\n<li><p>Class&lt;?&gt;[] interfaces</p>\n<p>  interfaces  代理类实现的被代理类的接口。</p>\n</li>\n<li><p>InvocationHandler h<br>  InvocationHandler 代理类的扩展处理器，具体扩展逻辑在该处理器中实现。</p>\n</li>\n</ul>\n<hr>\n<p>继续使用上面用到的<strong>IBussiness.java</strong> 接口<br>代理处理器<strong>ProxyInvocationHandler.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyInvocationHandler</span> <span class=\"keyword\">implements</span>  <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    \t<span class=\"comment\">//被代理的目标对象</span></span><br><span class=\"line\">      <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyInvocationHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"before do something\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">//通过反射调用目标对象的方法，如果invoke传入代理对象则会出现递归调用代理对象的代理方法</span></span><br><span class=\"line\">      Object result = method.invoke(target, args);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"after do something\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(<span class=\"keyword\">this</span>.getClass().getClassLoader(),\ttarget.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类<strong>JdkProxy.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkProxy</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldAnswerWithTrue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       IBussiness target = <span class=\"keyword\">new</span> Target();</span><br><span class=\"line\">    </span><br><span class=\"line\">       IBussiness proxyObj = (IBussiness) <span class=\"keyword\">new</span> ProxyInvocationHandler(target).getProxy();</span><br><span class=\"line\">    </span><br><span class=\"line\">       proxyObj.doSomething();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行效果</p>\n<p><img src=\"/images/imageForPost/笔记/动态代理/jdk代理图1.png\" alt=\"jdk代理图1\"></p>\n<hr>\n<h3 id=\"cglib的代理\"><a href=\"#cglib的代理\" class=\"headerlink\" title=\"cglib的代理\"></a>cglib的代理</h3><pre><code>与jdk代理不同的是cglib代理是通过运行时通过字节码库生成目标对象的子类，所以不需要像jdk代理一样目标对象需要实现接口，Spring AOP中就是根据目标对象是否实现了接口来确定使用jdk代理还是cglib代理，具体的选择在后面会讲。\n</code></pre><p>测试工程使用的是<strong>maven</strong>，所以在工程<strong>pom</strong>中添加cglib的依赖<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;3.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>继续使用上面用到的<strong>IBussiness.java</strong> 接口<br>代理处理器<strong>CglibProxy.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CglibProxy</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxyObj</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cglib工具类</span></span><br><span class=\"line\">        Enhancer en = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        <span class=\"comment\">//设置被代理对象</span></span><br><span class=\"line\">        en.setSuperclass(target.getClass());</span><br><span class=\"line\">        <span class=\"comment\">//设置扩展处理器</span></span><br><span class=\"line\">        en.setCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//返回代理对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> en.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before do something by cglib\"</span>);</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after do something by cglib\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类<strong>CglibProxyTest.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldAnswerWithTrue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        IBussiness target = <span class=\"keyword\">new</span> Target();</span><br><span class=\"line\">    </span><br><span class=\"line\">        IBussiness proxyObj = (IBussiness) <span class=\"keyword\">new</span> CglibProxy(target).getProxyObj();</span><br><span class=\"line\">    </span><br><span class=\"line\">        proxyObj.doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果</p>\n<p><img src=\"/images/imageForPost/笔记/动态代理/cglib代理图1.png\" alt=\"cglib代理图1\"></p>\n<p>可见cglib和jdk代理在代码结构上非常类似，Spring AOP则是使用这两种方式创建代理，Spring AOP中代理的扩展方法即advice扩展方法是另外指定的，而前面的代理扩展则是写死的，如何使得代理类能使用我们指定的方法呢，像AOP一样可以使用前置通知、后置通知和环绕通知。最简单的方法就是给<strong>ProxyInvocationHandler</strong>的构造方法传入想要用来扩展的方法，然后在目标对象方法的invoke之前调用扩展方法即可。<br>接下来简单的看下Spring的AOP<br>手边的工程是用的Spring 3.0.5版本<br>在<strong>org.springframework.aop.framework</strong>包下的<strong>DefaultAopProxyFactory</strong>类中有个<strong>public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException</strong> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AopProxy <span class=\"title\">createAopProxy</span><span class=\"params\">(AdvisedSupport config)</span> <span class=\"keyword\">throws</span> AopConfigException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!config.isOptimize() &amp;&amp; !config.isProxyTargetClass() &amp;&amp; !<span class=\"keyword\">this</span>.hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(config);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Class targetClass = config.getTargetClass();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation.\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetClass.isInterface()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(config);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!cglibAvailable) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"Cannot proxy target class because CGLIB2 is not available. Add CGLIB to the class path or specify proxy interfaces.\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DefaultAopProxyFactory.CglibProxyFactory.createCglibProxy(config);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>会根据被代理对象是否有实现接口来选择使用jdk代理还是cglib代理<br>跟进<strong>JdkDynamicAopProxy</strong>类可以看到<strong>getProxy()</strong>方法通过<strong>Proxy.newProxyInstance</strong>返回了一个代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Creating JDK dynamic proxy: target source is \"</span> + <span class=\"keyword\">this</span>.advised.getTargetSource());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        Class[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class=\"keyword\">this</span>.advised);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跟进,则可以看到对应的<strong>getProxy()</strong>方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Creating CGLIB2 proxy: target source is \"</span> + <span class=\"keyword\">this</span>.advised.getTargetSource());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class rootClass = <span class=\"keyword\">this</span>.advised.getTargetClass();</span><br><span class=\"line\">            Assert.state(rootClass != <span class=\"keyword\">null</span>, <span class=\"string\">\"Target class must be available for creating a CGLIB proxy\"</span>);</span><br><span class=\"line\">            Class proxySuperClass = rootClass;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (AopUtils.isCglibProxyClass(rootClass)) &#123;</span><br><span class=\"line\">                proxySuperClass = rootClass.getSuperclass();</span><br><span class=\"line\">                Class[] additionalInterfaces = rootClass.getInterfaces();</span><br><span class=\"line\">                Class[] var8 = additionalInterfaces;</span><br><span class=\"line\">                x = additionalInterfaces.length;</span><br><span class=\"line\">    </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> var6 = <span class=\"number\">0</span>; var6 &lt; x; ++var6) &#123;</span><br><span class=\"line\">                    Class additionalInterface = var8[var6];</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.advised.addInterface(additionalInterface);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.validateClassIfNecessary(proxySuperClass);</span><br><span class=\"line\">            Enhancer enhancer = <span class=\"keyword\">this</span>.createEnhancer();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classLoader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                enhancer.setClassLoader(classLoader);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (classLoader <span class=\"keyword\">instanceof</span> SmartClassLoader &amp;&amp; ((SmartClassLoader)classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class=\"line\">                    enhancer.setUseCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            enhancer.setSuperclass(proxySuperClass);</span><br><span class=\"line\">            enhancer.setStrategy(<span class=\"keyword\">new</span> UndeclaredThrowableStrategy(UndeclaredThrowableException.class));</span><br><span class=\"line\">            enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(<span class=\"keyword\">this</span>.advised));</span><br><span class=\"line\">            enhancer.setInterceptDuringConstruction(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            Callback[] callbacks = <span class=\"keyword\">this</span>.getCallbacks(rootClass);</span><br><span class=\"line\">            enhancer.setCallbacks(callbacks);</span><br><span class=\"line\">            enhancer.setCallbackFilter(<span class=\"keyword\">new</span> Cglib2AopProxy.ProxyCallbackFilter(<span class=\"keyword\">this</span>.advised.getConfigurationOnlyCopy(), <span class=\"keyword\">this</span>.fixedInterceptorMap, <span class=\"keyword\">this</span>.fixedInterceptorOffset));</span><br><span class=\"line\">            Class[] types = <span class=\"keyword\">new</span> Class[callbacks.length];</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(x = <span class=\"number\">0</span>; x &lt; types.length; ++x) &#123;</span><br><span class=\"line\">                types[x] = callbacks[x].getClass();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            enhancer.setCallbackTypes(types);</span><br><span class=\"line\">            Object proxy;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.constructorArgs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                proxy = enhancer.create(<span class=\"keyword\">this</span>.constructorArgTypes, <span class=\"keyword\">this</span>.constructorArgs);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                proxy = enhancer.create();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CodeGenerationException var9) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"Could not generate CGLIB subclass of class [\"</span> + <span class=\"keyword\">this</span>.advised.getTargetClass() + <span class=\"string\">\"]: \"</span> + <span class=\"string\">\"Common causes of this problem include using a final class or a non-visible class\"</span>, var9);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException var10) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"Could not generate CGLIB subclass of class [\"</span> + <span class=\"keyword\">this</span>.advised.getTargetClass() + <span class=\"string\">\"]: \"</span> + <span class=\"string\">\"Common causes of this problem include using a final class or a non-visible class\"</span>, var10);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var11) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"Unexpected AOP exception\"</span>, var11);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<strong>Cglib2AopProxy</strong>的属性中有一个transient关键字，之前基本没看到过（果然是我见识少啊）<br>这也是java的关键字之一<br>这个关键字用来标示某个属性不被序列化<br>定义一个会被序列化的类<strong>TrabsientTest.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransientTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String field1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> String field2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransientTest</span><span class=\"params\">(String field1, String field2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.field1 = field1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.field2 = field2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransientTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.field2 = <span class=\"string\">\"???\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"TransientTest&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"field1='\"</span> + field1 + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", field2='\"</span> + field2 + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后创建一个该类的对象并且序列化它 <strong>TestSerial.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSerial</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransientTest obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldAnswerWithTrue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        TransientTest obj = <span class=\"keyword\">new</span> TransientTest(<span class=\"string\">\"test1\"</span>,<span class=\"string\">\"test2\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        System.out.println(obj.toString());</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ObjectOutputStream o = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"obj\"</span>));</span><br><span class=\"line\">            o.writeObject(obj);</span><br><span class=\"line\">            o.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ObjectInputStream in =<span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"obj\"</span>));</span><br><span class=\"line\">            TransientTest logInfoIn = (TransientTest)in.readObject();</span><br><span class=\"line\">            System.out.println(logInfoIn.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果如图</p>\n<p><img src=\"/images/imageForPost/笔记/动态代理/transient图1.png\" alt=\"transient图1\"></p>\n<p>​    执行后可以看到field2并没有值，在序列化时略过了field2，在反序列化的时候并没有执行构造函数给field2赋值“？？？”，反序列化并不会通过构造函数进行创建对象，而是载入了该类对象的持久化状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>疯狂加班之后终于有两天是早点下班的了—。</p>\n<p>这两天看java核心技术36讲（倒不如是说有点像面试角度java36问）的时候有提到了动态代理说基于什么原理？<br>说到动态代理，对应就会有静态代理，说到代理，应该也会提到反射，以及常见的使用到了动态代理的应用—Spring的AOP<br>对于Spring AOP仅限于知道怎么用，对于反射也只是之前在工作中有个需求通过反射去get set值可以节约大量的工作量从而简单使用过，对于其中的一些常见的概念印象却不深。  </p>\n<ul>\n<li>静态代理</li>\n<li>动态代理<ul>\n<li>jdk动态代理</li>\n<li>cglib动态代理。</li>\n</ul>\n</li>\n<li>Spring AOP中是怎么使用到动态代理的</li>\n<li>在spring的Cglib2AopProxy中使用到的transient关键字是做什么的</li>\n</ul>\n<h2 id=\"先来说说java的三种代理模式。\"><a href=\"#先来说说java的三种代理模式。\" class=\"headerlink\" title=\"先来说说java的三种代理模式。\"></a>先来说说java的三种代理模式。</h2><p>代理模式proxy是一种设计模式，假设目标对象A有功能functionA()，只负责他对应的业务逻辑，而调用时想在业务逻辑之前或者之后想打印些系统日志，这时候存在一个对A的增强对象proxyA，扩展了A的功能，使得通过代理对象proxyA访问目标对象A，在目标对象A实现功能的基础上扩展了额外的系统日志打印功能，在不修改A的基础上扩展了目标A的功能并且调用目标对象。</p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p><strong>静态代理的时候首先需要有一个接口或者父类供代理类和目标类一同实现或继承</strong>。<br>代码如下<br>接口<strong>IBussiness.java</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBussiness</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目标类<strong>Target.java</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBussiness</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"do something\"</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代理类<strong>TargetProxy.java</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TargetProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBussiness</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> IBussiness target;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TargetProxy</span><span class=\"params\">(IBussiness target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"before do something\"</span>);</span><br><span class=\"line\">    target.doSomething();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"after do something\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类<strong>AppTest.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Rigorous Test :-)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldAnswerWithTrue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        assertTrue( <span class=\"keyword\">true</span> );</span><br><span class=\"line\">        Target target = <span class=\"keyword\">new</span> Target();</span><br><span class=\"line\">    </span><br><span class=\"line\">        TargetProxy proxy = <span class=\"keyword\">new</span> TargetProxy(target);</span><br><span class=\"line\">    </span><br><span class=\"line\">        proxy.doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><img src=\"/images/imageForPost/笔记/动态代理/静态代理图1.png\" alt=\"静态代理图1\"></p>\n<hr>\n<p>​        可见代理可以在不修改目标对象的情况下扩展对应的功能，但是代理对象和目标对象要实现相同的接口，如果业务中存在大量需要被代理的类则会增加很多不必要的维护工作。<br>​        为了解决这一问题，可以看下jdk动态代理。<br>​        动态代理不要求代理类与目标类实现相同的接口，但是目标类要求实现接口，通过在运行时创建实现了指定接口的对象来实现目标对象的扩展。</p>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><p>主要使用到<strong>java.lang.reflect</strong>的<strong>Proxy</strong>类的<strong>newProxyInstance</strong>方法 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          InvocationHandler h)</span><span class=\"keyword\">throws</span> IllegalArgumentException</span></span><br></pre></td></tr></table></figure>\n<p>主要有三个参数 </p>\n<ul>\n<li><p>ClassLoader loader  </p>\n<p>ClassLoader 类加载器，用来加载生成的类，类加载器可以参考这篇</p>\n<p>[这篇]: </p>\n</li>\n</ul>\n<ul>\n<li><p>Class&lt;?&gt;[] interfaces</p>\n<p>  interfaces  代理类实现的被代理类的接口。</p>\n</li>\n<li><p>InvocationHandler h<br>  InvocationHandler 代理类的扩展处理器，具体扩展逻辑在该处理器中实现。</p>\n</li>\n</ul>\n<hr>\n<p>继续使用上面用到的<strong>IBussiness.java</strong> 接口<br>代理处理器<strong>ProxyInvocationHandler.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyInvocationHandler</span> <span class=\"keyword\">implements</span>  <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    \t<span class=\"comment\">//被代理的目标对象</span></span><br><span class=\"line\">      <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyInvocationHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"before do something\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">//通过反射调用目标对象的方法，如果invoke传入代理对象则会出现递归调用代理对象的代理方法</span></span><br><span class=\"line\">      Object result = method.invoke(target, args);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"after do something\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(<span class=\"keyword\">this</span>.getClass().getClassLoader(),\ttarget.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类<strong>JdkProxy.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkProxy</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldAnswerWithTrue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       IBussiness target = <span class=\"keyword\">new</span> Target();</span><br><span class=\"line\">    </span><br><span class=\"line\">       IBussiness proxyObj = (IBussiness) <span class=\"keyword\">new</span> ProxyInvocationHandler(target).getProxy();</span><br><span class=\"line\">    </span><br><span class=\"line\">       proxyObj.doSomething();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行效果</p>\n<p><img src=\"/images/imageForPost/笔记/动态代理/jdk代理图1.png\" alt=\"jdk代理图1\"></p>\n<hr>\n<h3 id=\"cglib的代理\"><a href=\"#cglib的代理\" class=\"headerlink\" title=\"cglib的代理\"></a>cglib的代理</h3><pre><code>与jdk代理不同的是cglib代理是通过运行时通过字节码库生成目标对象的子类，所以不需要像jdk代理一样目标对象需要实现接口，Spring AOP中就是根据目标对象是否实现了接口来确定使用jdk代理还是cglib代理，具体的选择在后面会讲。\n</code></pre><p>测试工程使用的是<strong>maven</strong>，所以在工程<strong>pom</strong>中添加cglib的依赖<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;3.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>继续使用上面用到的<strong>IBussiness.java</strong> 接口<br>代理处理器<strong>CglibProxy.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CglibProxy</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxyObj</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cglib工具类</span></span><br><span class=\"line\">        Enhancer en = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        <span class=\"comment\">//设置被代理对象</span></span><br><span class=\"line\">        en.setSuperclass(target.getClass());</span><br><span class=\"line\">        <span class=\"comment\">//设置扩展处理器</span></span><br><span class=\"line\">        en.setCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//返回代理对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> en.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before do something by cglib\"</span>);</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after do something by cglib\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类<strong>CglibProxyTest.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldAnswerWithTrue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        IBussiness target = <span class=\"keyword\">new</span> Target();</span><br><span class=\"line\">    </span><br><span class=\"line\">        IBussiness proxyObj = (IBussiness) <span class=\"keyword\">new</span> CglibProxy(target).getProxyObj();</span><br><span class=\"line\">    </span><br><span class=\"line\">        proxyObj.doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果</p>\n<p><img src=\"/images/imageForPost/笔记/动态代理/cglib代理图1.png\" alt=\"cglib代理图1\"></p>\n<p>可见cglib和jdk代理在代码结构上非常类似，Spring AOP则是使用这两种方式创建代理，Spring AOP中代理的扩展方法即advice扩展方法是另外指定的，而前面的代理扩展则是写死的，如何使得代理类能使用我们指定的方法呢，像AOP一样可以使用前置通知、后置通知和环绕通知。最简单的方法就是给<strong>ProxyInvocationHandler</strong>的构造方法传入想要用来扩展的方法，然后在目标对象方法的invoke之前调用扩展方法即可。<br>接下来简单的看下Spring的AOP<br>手边的工程是用的Spring 3.0.5版本<br>在<strong>org.springframework.aop.framework</strong>包下的<strong>DefaultAopProxyFactory</strong>类中有个<strong>public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException</strong> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AopProxy <span class=\"title\">createAopProxy</span><span class=\"params\">(AdvisedSupport config)</span> <span class=\"keyword\">throws</span> AopConfigException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!config.isOptimize() &amp;&amp; !config.isProxyTargetClass() &amp;&amp; !<span class=\"keyword\">this</span>.hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(config);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Class targetClass = config.getTargetClass();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation.\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetClass.isInterface()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(config);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!cglibAvailable) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"Cannot proxy target class because CGLIB2 is not available. Add CGLIB to the class path or specify proxy interfaces.\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DefaultAopProxyFactory.CglibProxyFactory.createCglibProxy(config);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>会根据被代理对象是否有实现接口来选择使用jdk代理还是cglib代理<br>跟进<strong>JdkDynamicAopProxy</strong>类可以看到<strong>getProxy()</strong>方法通过<strong>Proxy.newProxyInstance</strong>返回了一个代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Creating JDK dynamic proxy: target source is \"</span> + <span class=\"keyword\">this</span>.advised.getTargetSource());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        Class[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class=\"keyword\">this</span>.advised);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跟进,则可以看到对应的<strong>getProxy()</strong>方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Creating CGLIB2 proxy: target source is \"</span> + <span class=\"keyword\">this</span>.advised.getTargetSource());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class rootClass = <span class=\"keyword\">this</span>.advised.getTargetClass();</span><br><span class=\"line\">            Assert.state(rootClass != <span class=\"keyword\">null</span>, <span class=\"string\">\"Target class must be available for creating a CGLIB proxy\"</span>);</span><br><span class=\"line\">            Class proxySuperClass = rootClass;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (AopUtils.isCglibProxyClass(rootClass)) &#123;</span><br><span class=\"line\">                proxySuperClass = rootClass.getSuperclass();</span><br><span class=\"line\">                Class[] additionalInterfaces = rootClass.getInterfaces();</span><br><span class=\"line\">                Class[] var8 = additionalInterfaces;</span><br><span class=\"line\">                x = additionalInterfaces.length;</span><br><span class=\"line\">    </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> var6 = <span class=\"number\">0</span>; var6 &lt; x; ++var6) &#123;</span><br><span class=\"line\">                    Class additionalInterface = var8[var6];</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.advised.addInterface(additionalInterface);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.validateClassIfNecessary(proxySuperClass);</span><br><span class=\"line\">            Enhancer enhancer = <span class=\"keyword\">this</span>.createEnhancer();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classLoader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                enhancer.setClassLoader(classLoader);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (classLoader <span class=\"keyword\">instanceof</span> SmartClassLoader &amp;&amp; ((SmartClassLoader)classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class=\"line\">                    enhancer.setUseCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            enhancer.setSuperclass(proxySuperClass);</span><br><span class=\"line\">            enhancer.setStrategy(<span class=\"keyword\">new</span> UndeclaredThrowableStrategy(UndeclaredThrowableException.class));</span><br><span class=\"line\">            enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(<span class=\"keyword\">this</span>.advised));</span><br><span class=\"line\">            enhancer.setInterceptDuringConstruction(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            Callback[] callbacks = <span class=\"keyword\">this</span>.getCallbacks(rootClass);</span><br><span class=\"line\">            enhancer.setCallbacks(callbacks);</span><br><span class=\"line\">            enhancer.setCallbackFilter(<span class=\"keyword\">new</span> Cglib2AopProxy.ProxyCallbackFilter(<span class=\"keyword\">this</span>.advised.getConfigurationOnlyCopy(), <span class=\"keyword\">this</span>.fixedInterceptorMap, <span class=\"keyword\">this</span>.fixedInterceptorOffset));</span><br><span class=\"line\">            Class[] types = <span class=\"keyword\">new</span> Class[callbacks.length];</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(x = <span class=\"number\">0</span>; x &lt; types.length; ++x) &#123;</span><br><span class=\"line\">                types[x] = callbacks[x].getClass();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            enhancer.setCallbackTypes(types);</span><br><span class=\"line\">            Object proxy;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.constructorArgs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                proxy = enhancer.create(<span class=\"keyword\">this</span>.constructorArgTypes, <span class=\"keyword\">this</span>.constructorArgs);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                proxy = enhancer.create();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CodeGenerationException var9) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"Could not generate CGLIB subclass of class [\"</span> + <span class=\"keyword\">this</span>.advised.getTargetClass() + <span class=\"string\">\"]: \"</span> + <span class=\"string\">\"Common causes of this problem include using a final class or a non-visible class\"</span>, var9);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException var10) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"Could not generate CGLIB subclass of class [\"</span> + <span class=\"keyword\">this</span>.advised.getTargetClass() + <span class=\"string\">\"]: \"</span> + <span class=\"string\">\"Common causes of this problem include using a final class or a non-visible class\"</span>, var10);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var11) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"Unexpected AOP exception\"</span>, var11);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<strong>Cglib2AopProxy</strong>的属性中有一个transient关键字，之前基本没看到过（果然是我见识少啊）<br>这也是java的关键字之一<br>这个关键字用来标示某个属性不被序列化<br>定义一个会被序列化的类<strong>TrabsientTest.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransientTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String field1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> String field2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransientTest</span><span class=\"params\">(String field1, String field2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.field1 = field1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.field2 = field2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransientTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.field2 = <span class=\"string\">\"???\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"TransientTest&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"field1='\"</span> + field1 + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", field2='\"</span> + field2 + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后创建一个该类的对象并且序列化它 <strong>TestSerial.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSerial</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransientTest obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldAnswerWithTrue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        TransientTest obj = <span class=\"keyword\">new</span> TransientTest(<span class=\"string\">\"test1\"</span>,<span class=\"string\">\"test2\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        System.out.println(obj.toString());</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ObjectOutputStream o = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"obj\"</span>));</span><br><span class=\"line\">            o.writeObject(obj);</span><br><span class=\"line\">            o.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ObjectInputStream in =<span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"obj\"</span>));</span><br><span class=\"line\">            TransientTest logInfoIn = (TransientTest)in.readObject();</span><br><span class=\"line\">            System.out.println(logInfoIn.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果如图</p>\n<p><img src=\"/images/imageForPost/笔记/动态代理/transient图1.png\" alt=\"transient图1\"></p>\n<p>​    执行后可以看到field2并没有值，在序列化时略过了field2，在反序列化的时候并没有执行构造函数给field2赋值“？？？”，反序列化并不会通过构造函数进行创建对象，而是载入了该类对象的持久化状态。</p>\n"},{"_content":"时间复杂度\n\n\n\n\n\n空间复杂度\n\n","source":"_posts/如何计算算法的复杂度.md","raw":"时间复杂度\n\n\n\n\n\n空间复杂度\n\n","slug":"如何计算算法的复杂度","published":1,"date":"2019-09-08T14:42:51.448Z","updated":"2019-09-08T14:54:58.276Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck10mugam00009dfy98kienks","content":"<p>时间复杂度</p>\n<p>空间复杂度</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时间复杂度</p>\n<p>空间复杂度</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxhbjhi6000163fy0bxzd4kg","category_id":"cjxhbjhib000363fyaeraodzr","_id":"cjxhbjhif000763fyi125xgel"},{"post_id":"cjxhbjhk3000863fyun32niir","category_id":"cjxhbjhk5000a63fylseunrlk","_id":"cjxhbjhk8000f63fybxnab8jf"},{"post_id":"cjxhbjhk4000963fyuubhuxbl","category_id":"cjxhbjhk5000a63fylseunrlk","_id":"cjxhbjhk8000h63fy4zxhyprj"},{"post_id":"cjxhbjhkj000i63fyhydnwkbm","category_id":"cjxhbjhk5000a63fylseunrlk","_id":"cjxhbjhkk000k63fy8nua2us0"}],"PostTag":[{"post_id":"cjxhbjhi6000163fy0bxzd4kg","tag_id":"cjxhbjhic000463fy6cj3pfj5","_id":"cjxhbjhie000663fy3mxgxcyg"},{"post_id":"cjxhbjhk3000863fyun32niir","tag_id":"cjxhbjhk5000b63fyfih86tkr","_id":"cjxhbjhk8000e63fygu1yngnp"},{"post_id":"cjxhbjhk4000963fyuubhuxbl","tag_id":"cjxhbjhk5000b63fyfih86tkr","_id":"cjxhbjhk8000g63fy87atgrqs"},{"post_id":"cjxhbjhkj000i63fyhydnwkbm","tag_id":"cjxhbjhk5000b63fyfih86tkr","_id":"cjxhbjhkk000j63fysiz04tpx"}],"Tag":[{"name":"devops","_id":"cjxhbjhic000463fy6cj3pfj5"},{"name":"java","_id":"cjxhbjhk5000b63fyfih86tkr"}]}}